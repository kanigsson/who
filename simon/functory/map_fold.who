(**************************************************************************)
(*                                                                        *)
(*  Functory: a distributed computing library for Ocaml                   *)
(*  Copyright (C) 2010 Jean-Christophe Filliatre and Kalyan Krishnamani   *)
(*                                                                        *)
(*  This software is free software; you can redistribute it and/or        *)
(*  modify it under the terms of the GNU Library General Public           *)
(*  License version 2.1, with the special exception on linking            *)
(*  described in file LICENSE.                                            *)
(*                                                                        *)
(*  This software is distributed in the hope that it will be useful,      *)
(*  but WITHOUT ANY WARRANTY; without even the implied warranty of        *)
(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                  *)
(*                                                                        *)
(**************************************************************************)

(* ====================================
data struct
======================================= *)

(* ============ hash tables =========== *)
type hashtbl ['a 'b]
logic Hashtbl.add ['a 'b|r|] : ref(r, ('a, 'b) hashtbl) -> 'a -> 'b ->{r} unit
logic Hashtbl.create ['a 'b||] : int ->{} ('a, 'b) hashtbl
logic Hashtbl.mem ['a 'b] : ('a, 'b) hashtbl  -> 'a -> prop
logic Hashtbl.length ['a 'b] : ('a, 'b) hashtbl -> int
parameter Hashtbl.find ['a 'b||] (hshtbl : ('a, 'b) hashtbl) (x : 'a) : {} 'b =
  { Hashtbl.mem hshtbl x }
  {}

axiom hashtbl_empty_lengh ['a 'b|r|] :
  forall (n: int).
  [[]] (Hashtbl.create n : ('a, 'b) hashtbl) [[res : (Hashtbl.length res) = 0 /\ forall (x:'a). ~ (Hashtbl.mem res x)]]
(* adding an item to a hashtbl makes this item member of the later *)
axiom hashtbl_add ['a 'b|r|] :
  forall (x : 'a) (y : 'b) (hshtbl : ref(r, ('a, 'b) hashtbl)).
  [[]] Hashtbl.add hshtbl x y [[Hashtbl.mem !!hshtbl x]]
(* adding an item to a hastable increments its length *)
axiom hashtbl_add_length ['a 'b|r|] :
  forall (x : 'a) (y : 'b) (hshtbl : ref(r, ('a, 'b) hashtbl)).
  [[~ (Hashtbl.mem !!hshtbl x)]] Hashtbl.add hshtbl x y [[(Hashtbl.length !!hshtbl) = (Hashtbl.length !!hshtbl@old) +1]]
axiom hashtbl_add_find ['a 'b|r|] :
  forall (x : 'a) (y : 'b) (hshtbl : ref(r,('a, 'b) hashtbl)).
  [[]] Hashtbl.add hshtbl x y  [[ [[]] Hashtbl.find !hshtbl x [[ r: r = y ]] ]]


(* ============ lists ============= *)
logic List.mem ['a] : 'a -> 'a list -> prop
logic List.remove ['a] : 'a -> 'a list -> 'a list
logic List.length ['a] : 'a list -> int
logic List.append ['a] : 'a list -> 'a list -> 'a list
logic List.index ['a] : int -> 'a list -> 'a

(* spec of List.map. It takes a relationship rel in arg, which describe a bound between
the arg list, the state before call, the state after call and the result list *)
parameter List.map ['a 'b||'e] (rel : 'a list -> <'e> -> <'e> -> 'b list -> prop) (f : 'a ->{'e} 'b) (l : 'a list) : {'e} 'b list =
  { 
    match l with
    | Nil -> rel l cur cur Nil
    | Cons (head,tail) -> (pre f head cur /\ (* precondition of f on head of list *)
      (forall (res_tail : 'b list) (s2:<'e>).
        [[]] f head [[res : rel tail cur s2 res_tail -> rel l old s2 (Cons res res_tail)]])) (* propagate relationship *)
    end
  }
  { res:
    match l with
    | Nil -> res = (Nil:'b list) /\ cur = old
    | Cons (head,tail) -> (res <> (Nil:'b list) /\
      rel l old cur res)
    end 
    (* this means, roughly : rel (List.map f (tail l)) -> rel (List.map f l) *)
  }

let empty_rel ['a 'b||'e] (l_old : 'a list) (s1:<'e>) (s2:<'e>) (l_res : b list) = True

(*
  l =             [x]--------------->l2
  states : s1=old         s2               s3
              \          / \               /
               \-> f x -/   \-> map f l2 -/

                            `------------'
                            rel l2 s1 s2 (tail res)
====>
              `--------------------------'
                  rel l old s2 res
*)

(* inductive for membership *)
inductive ind_list_mem ['a] ('a * 'a list) =
  | base_mem : forall (x:'a) (l:'a list). ind_list_mem (x, (Cons x l))
  | rec_mem : forall (x y:'a) (l:'a list). ind_list_mem (x, l) -> ind_list_mem (x, (Cons y l))
  end
axiom list_mem_inductive ['a]:
  forall (x:'a) (l:'a list).
  (ind_list_mem (x, l) -> List.mem x l) /\
  (List.mem x l -> ind_list_mem (x, l))

inductive ind_list_rem ['a] ('a * 'a list * 'a list) =
  | base_success : forall (x:'a)(l:'a list). ind_list_rem (x, (Cons x l), l)
  | base_failure : forall (x y:'a)(l l2:'a list). x <> y -> 
      ind_list_rem (x, l, l2) -> ind_list_rem (x, (Cons y l), (Cons y l2))
  | base_nil : forall (x:'a). ind_list_rem (x, Nil, Nil)
  end
axiom list_remove_ind ['a]:
  forall (x:'a) (l l2:'a list).
  (ind_list_rem (x, l, l2) -> List.remove x l = l2) /\
  (List.remove x l = l2 -> ind_list_rem (x, l, l2))

inductive ind_list_len ['a] ('a list * int) =
  | base : ind_list_len (Nil, 0)
  | recur : forall (x:'a) (l:'a list) (n:int). 
      ind_list_len (l, n) -> ind_list_len (Cons x l, n+1)
  end
axiom list_length_ind ['a]:
  forall (l:'a list) (n:int).
  (ind_list_len (l, n) -> List.length l = n) /\
  (List.length l = n -> ind_list_len (l, n))

lemma remove_does_remove ['a] :
  forall (x : 'a) (l : 'a list).
  List.remove x (Cons x l) = l
lemma remove_does_not_rampage ['a] :
  forall (x y : 'a) (l : 'a list).
  y <> x -> List.remove y (Cons x l) = Cons x (List.remove y l)
lemma remove_empty ['a]:
  forall (x: 'a) (l : 'a list).
  l = Nil -> List.remove x l = Nil
axiom append_does_append ['a] :
  forall (l1 l2 : 'a list) (x : 'a).
  (List.mem x l1 -> List.mem x (List.append l1 l2)) /\
  (List.mem x l2 -> List.mem x (List.append l1 l2))
axiom append_cons_list ['a] :
  forall (l l2:'a list).
  match l with
  | Cons (x, Nil) ->  List.append l l2 = Cons x l2
  end
axiom append_list_list ['a] :
  forall (l1 l3: 'a list).
  match l1 with
  | Cons (x, l2) -> List.append l1 l3 = Cons x (List.append l2 l3)
  end
lemma list_length_nil ['a]:
  forall (l : 'a list).
  l = Nil -> List.length l = 0
lemma list_length_pos ['a] :
  forall (l:'a list).
  List.length l >= 0
axiom list_length_map ['a 'b||'e]:
  forall (l:'a list) (f:'a ->{'e} 'b) (rel: 'a list -> <'e> -> <'e> -> 'b list -> prop).
  [[]] List.map [{'e}] rel f l [[res : List.length l = List.length res]]
goal blih : 
  forall (l:int list).
  List.length l < List.length (Cons 1 l)

(* (map f l)[i] = f l[i] *)
axiom list_index_map ['a 'b||'e] :
  forall (x:'a) (l:'a list) (i:int) (f:'a ->{'e} 'b) (rel: 'a list -> <'e> -> <'e> -> 'b list -> prop).
  i >= 0 /\ i < List.length l ->
  [[]] List.map [{'e}] rel f l [[res: [[]] f (List.index i l)[[r : r = List.index i res]] ]]
axiom list_cons_mem ['a]:
  forall (x:'a) (l:'a list).
  List.mem x (Cons x l)
axiom list_cons_mem_tail ['a]:
  forall (x:'a) (l:'a list).
  (forall (y:'a). List.mem y l -> List.mem y (Cons x l))
axiom list_cons_length_tail ['a]:
  forall (x:'a) (l:'a list).
  (List.length (Cons x l) = List.length l + 1)
axiom list_index ['a]:
  forall (i : int) (l: 'a list).
  match l with
  | Cons (x, l2) -> i = 0 -> List.index i l = x
  end
axiom list_index_rec ['a]:
  forall (i : int) (l:'a list).
  match l with
  | Cons (x, l2) -> i > 0 /\ i < List.length l -> List.index i l = List.index (i-1) l2
  end
axiom list_mem_inverse ['a] :
  forall (x x2:'a) (l l2:'a list).
  match l with
  | Cons (x2, l2) -> ~ (List.mem x l) ->
    (x2 <> x /\ ~ (List.mem x l2))
  end



(* tests for those axioms *)
goal g1 ['a] :
  forall (x x2:'a) (l:'a list).
  List.length (Cons x (Cons x2 l)) >= 2
goal g2 ['a] :
  forall (x x2:'a) (l:'a list).
  List.length (Cons x (Cons x2 Nil)) = 2
goal g3 ['a] :
  forall (x x2:'a) (l:'a list).
  List.length (Cons x (Cons x2 (Cons x l))) = List.length l + 3 (* FIXME !!! this is false !!! *)
goal g4 ['a] :
  forall (x x2:'a) (l:'a list).
  List.remove x (Cons x l) = l
goal g6 ['a] :
  forall (l:'a list).
  l = Nil \/ (List.length l >= 1)
(*goal g5 ['a] :
  forall (x x2:'a) (l:'a list).
  List.mem x l -> List.length (List.remove x l) < List.length l
*)
goal g6 ['a 'b] :
  forall (l:'a list)(f:'a -> 'b).
  [[]] List.map [{}] (empty_rel [{}]) (fun (x:'a) ->{} f x {}) l [[res: List.length res = List.length l]]
goal g7 ['a] :
  forall (x:'a) (l:'a list).
  ~ (List.mem x l) -> List.remove x l = l

(*
*)

(* =========== refs ========== *)

logic incr [|r|] : ref(r, int) ->{r} unit
axiom incr_increments [|r|] :
  forall (s : ref(r, int)).
  [[]] incr s [[!!s = ((!!s@old) + 1)]]

(* ================== special data =================== *)
type map_or_fold ['a 'b] =
  | Map of 'a
  | Fold of 'b


parameter map_fold_wrapper ['a 'b 'c 'd 'e]
  (map : ('a -> 'e))
  (fold : ('b -> 'c -> 'd))
  (truc : ('a, ('b * 'c)) map_or_fold) : {} ('e, 'd) map_or_fold =
  {}
  { res:
    match truc with 
    | Map m -> res = Map (map m)
    | Fold f ->  res = Fold (fold (fst f) (snd f))
    end
  }

parameter map_fold_wrapper2 ['a 'b 'c 'd 'e]
  (map : 'a -> 'd)
  (fold : 'b -> 'c -> 'd)
  (truc : ('a, ('b * 'c)) map_or_fold) : {} 'd =
  {}
  { res:
    match truc with 
    | Map m -> res = map m
    | Fold f -> res = (fold (fst f) (snd f))
    end
  }

(* =============================
master and worker specs
================================ *)

type a
type b
logic worker : a ->{} b
logic master ['c||'e] : (a * 'c) -> b ->{'e} (a *'c) list

(* relation *)
logic relat ['c||'e] : <'e> -> (a * 'c) list -> <'e> -> (a * 'c) list -> prop
axiom relat_init ['c||'e] : (* one step of worker does keep the invariant *)
  forall (l1 l2 : (a * 'c) list) (x : a) (y : 'c) (e1 e2 : <'e>).
  (List.mem (x, y) l1 /\
  [[ cur = e1 ]] master [{'e}] (x, y) (worker x) [[ l : cur = e2 /\ l2 = List.remove (x, y) (List.append l l1) ]] )
  -> relat [{'e}] e1 l1 e2 l2

(* transitive reflective closure *)
logic relat_trans ['c||'e] : <'e> -> (a * 'c) list -> <'e> -> (a * 'c) list -> prop
axiom relat_trans_reflex ['c||'e] :
  forall (e1 : <'e>) (l1 : (a * 'c) list).
    relat_trans [{'e}] e1 l1 e1 l1
axiom relat_trans_trans ['c||'e] :
  forall (e1 e2 e3 : <'e>) (l1 l2 l3 : (a * 'c) list).
    (relat_trans [{'e}] e1 l1 e2 l2  /\ relat [{'e}] e2 l2 e3 l3)
    -> relat_trans [{'e}] e1 l1 e3 l3


parameter X.compute ['c||'e]
  (inv : <'e> -> (a * 'c) list -> prop )
  (worker : (a -> 'b))
  (master : (a * 'c -> 'b ->{'e} (a * 'c) list))
  (l : (a * 'c) list)
  : {'e} unit =
  {
    inv cur l /\
    forall (e1 e2 : <'e>) (l1 l2 : (a * 'c) list). inv e1 l1 -> relat [{'e}] e1 l1 e2 l2 -> inv e2 l2
  }
  { r:
    relat_trans [{'e}] old l cur Nil /\
    inv cur Nil
  }


(* =============================
tests
================================ *)

(*

let test1 (f : int -> b) (l : int list) =
  {
    exists (l2 : int list). l = Cons 1 l2
  }
  letregion t in
  let r = ref (t) 0 in
  let rel (l_old : int list) (s1:<t>) (s2:<t>) (l_res : b list) =
    (List.length l_old + !!r@s1 = List.length l_res + !!r@s2 /\
    ((l_old <> Nil) -> !!r@s2 = !!r@s1 + 1) /\
    !!r@s2 = List.length l_res) in
  let answer = List.map [{t}] rel (fun (x:int) ->{} incr r; f x {}) l in
  (answer, !r)
  {res:
    snd res = List.length l /\
    (exists (l2 : int list). l = Cons 1 l2) ->
      let rel (l_old : int list) (s1:< >) (s2:< >) (l_res : b list) = True in
      [[]] List.map [{}] rel (fun (x:int) ->{} f x {}) (List.tail l) [[r: (fst res) = Cons (f 1) r]]
  }

let test2 (l : int list) =
  {}
  letregion t in
  let r = ref(t) 0 in
  let rel (l_old : int list) (s1:<t>) (s2:<t>) (l_res : int list) =
    List.length l_old + !!r@s1 = List.length l_res + !!r@s2 /\
    List.length l_old + !!r@s1 = List.length l in
  List.map [{t}] rel (fun (x:int) ->{} r := !r + 1; !r {}) l
  { res:
    forall (j:int).
    0 <= j /\ j < List.length l -> List.index j res = j+1
  }
*)

(* =====================================
computing strategies specifications
======================================== *)

(*

(* =============== map ============ *)
let map (f : a -> b) (l : a list) =
  {
  }
  letregion r in
  let tasks =
    let i = ref (r) 0 in
    let rel (l_old : a list) (s1:<r>) (s2:<r>) (l_res : (a*int) list) =
      !!i@s1 + List.length l_old = !!i@s2 + List.length l_res /\
      !!i@s2 + List.length l_res = List.length l /\
      (l_res <> Nil -> snd (List.head l_res) = !!i@s2) in
    List.map [{r}] rel (fun (x:'a) -> {} incr i; x, !i {}) l in
  letregion r2 in
  let results = ref (r2) (Hashtbl.create 17) in
  let inv (s : <r2>) (l1 : (a * int) list) = (* invariant *)
    (Hashtbl.length (!!results@s)) + List.length l1 = List.length l /\
    (forall (i:int).
      [[Hashtbl.mem !!results@s i]] Hashtbl.find !results i [[res : res = f (List.index (i-1) l) ]])
  in
  X.compute [{r2}]
    inv
    f
    (fun (tuple : (a*int)) (r : b) ->{} Hashtbl.add results (snd tuple) r; Nil {})
    tasks;
  let rel (l_old : (a*int) list) (s1:<r2>) (s2:<r2>) (l_res : b list) =
    l_res <> Nil -> (snd (List.head l_old)) + List.length l_res = List.length l in
  List.map [{r2}]
    rel
    (fun (tuple : a*int) -> {} results := !results; (* FIXME : dirty hack *) Hashtbl.find !results (snd tuple) {})
    tasks
  { res:
    (l = Nil -> res = Nil) /\
    List.length res = List.length l /\
    [[]] List.map [{}] (fun (l_old : a list) (s1:< >) (s2:< >) (l_res : b list) -> True) (fun (x:a) ->{} f x {}) l [[ r : r = res ]] /\
    (forall (x:a). [[List.mem x l]] f x [[r : List.mem r res]])
  }



(* ============= map_local_fold ========= *)
logic logic_fold ['a 'b] : ('b -> 'a -> 'b) -> 'b -> 'a list -> 'b

axiom logic_fold_empty ['a 'b]:
  forall (f : 'b -> 'a -> 'b) (l : 'a list) (acc : 'b).
  l = Nil -> logic_fold f acc l = acc
axiom logic_fold_basic ['a 'b]: (* recursion *)
  forall (x : 'a) (f : 'b -> 'a -> 'b) (l l2: 'a list) (acc : 'b).
  l = Cons x l2 -> logic_fold f acc l = f (logic_fold f acc l2) x



let map_local_fold ['c] (map : a -> b) (fold : 'c -> b -> 'c) (acc : 'c) (l : a list) =
  {}
  letregion r in
  let acc = ref (r) acc in
  let inv (s:<r>) (l1 : (a * unit) list) =
    True in (* TODO *)
  X.compute [{r}]
    inv
    map
    (fun (_ : (a*unit)) (r : b) -> {} acc := (fold !acc r); Nil {})
    (List.map [{}] (fun (x : a) -> {} x, () {}) l);
  !acc
  { res:
  [[]] List.map [{}] map l [[l_map : res = logic_fold fold acc l_map]]
  }




let map_remote_fold  ~(map : 'a -> 'b) ~(fold : 'c -> 'b -> 'c) acc l =
  let acc = ref (Some acc) in
  let pending = Stack.create () in
  X.compute
    ~worker:(map_fold_wrapper map fold)
    ~master:(fun _ r -> match r with
   | Map r -> begin match !acc with
       | None -> Stack.push r pending; []
       | Some v -> acc := None; [Fold (v, r), ()]
     end
   | Fold r ->
       assert (!acc = None);
       if not (Stack.is_empty pending) then
         [Fold (r, Stack.pop pending), ()]
       else begin
         acc := Some r;
         []
       end)
    (List.map (fun x -> Map x, ()) l);
  (* we are done; the accumulator must exist *)
  match !acc with
    | Some r -> r
    | None -> assert false

let map_fold_ac ~(map : 'a -> 'b) ~(fold : 'b -> 'b -> 'b) acc l =
  let acc = ref (Some acc) in
  X.compute
    ~worker:(map_fold_wrapper2 map fold)
    ~master:(fun _ r ->
   match !acc with
   | None ->
       acc := Some r; []
   | Some v ->
       acc := None;
       [Fold (v, r), ()])
    (List.map (fun x -> Map x, ()) l);
  (* we are done; the accumulator must exist *)
  match !acc with
    | Some r -> r
    | None -> assert false

let map_fold_a ~(map : 'a -> 'b) ~(fold : 'b -> 'b -> 'b) acc l =
  let tasks =
    let i = ref 0 in
    List.map (fun x -> incr i; Map x, (!i, !i)) l
  in
  (* results maps i and j to (i,j,r) for each completed reduction of
     the interval i..j with result r *)
  let results = Hashtbl.create 17 in
  let merge i j r =
    if Hashtbl.mem results (i-1) then begin
let l, h, x = Hashtbl.find results (i-1) in
assert (h = i-1);
Hashtbl.remove results l;
Hashtbl.remove results h;
[Fold (x, r), (l, j)]
    end else if Hashtbl.mem results (j+1) then begin
let l, h, x = Hashtbl.find results (j+1) in
assert (l = j+1);
Hashtbl.remove results h;
Hashtbl.remove results l;
[Fold (r, x), (i, h)]
    end else begin
Hashtbl.add results i (i,j,r);
Hashtbl.add results j (i,j,r);
[]
    end
  in
  X.compute
    ~worker:(map_fold_wrapper2 map fold)
    ~master:(fun x r -> match x with
   | Map _, (i, _) -> merge i i r
   | Fold _, (i, j) -> merge i j r)
    tasks;
  (* we are done; results must contain 2 mappings only, for 1 and n *)
  try let _,_,r = Hashtbl.find results 1 in r with Not_found -> acc


*)
