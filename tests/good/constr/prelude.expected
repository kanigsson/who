section basiclogic coq predefined
  pangoline predefined
   logic /\  : prop -> prop -> prop
  logic \/  : prop -> prop -> prop
  logic ->  : prop -> prop -> prop
  logic ~  : prop -> prop
  logic = ['a||] : 'a -> 'a -> prop
  logic <> ['a1||] : 'a1 -> 'a1 -> prop
  logic fst ['a2 'b||] : ('a2 * 'b) -> 'a2
  logic snd ['a3 'b1||] : ('a3 * 'b1) -> 'b1
  logic , ['a4 'b2||] : 'a4 -> 'b2 -> 'a4 * 'b2 end
section arith coq "WhoArith"
  pangoline predefined
   logic +  : int -> int -> int
  logic -  : int -> int -> int
  logic *  : int -> int -> int
  logic <  : int -> int -> prop
  logic <=  : int -> int -> prop
  logic >  : int -> int -> prop
  logic >=  : int -> int -> prop
  logic <<  : int -> int -> bool
  logic <<=  : int -> int -> bool
  logic >>  : int -> int -> bool
  logic >>=  : int -> int -> bool
  logic max  : int -> int -> int
  logic min  : int -> int -> int
  logic mod  : int -> int -> int
  logic band  : bool -> bool -> bool
  logic bor  : bool -> bool -> bool end
logic == ['a5||] : 'a5 -> 'a5 -> bool
logic != ['a6||] : 'a6 -> 'a6 -> bool
section Whoref coq "WhoMap"
  pangoline predefined
   logic !! ['a7|r|] : ref(r,'a7) -> <r  > -> 'a7
  let
    ! ['a8|r1|] = (fun (x:ref(r1,'a8)) -> {(fun (cur:<r1  >) -> True)}
                  parameter('a8,{r1  })
                  {(fun (old:<r1  >) ->
                   (fun (cur1:<r1  >) ->
                   (fun (r2:'a8) ->
                   ((!! ['a8| r1|] x cur1) =['a8||] r2) /\
                   ((!! ['a8| r1|] x old) =['a8||] (!! ['a8| r1|] x cur1)))))}) 
  let
    := ['a9|r3|] = (fun (x1:ref(r3,'a9)) ->
                   (fun (v:'a9) -> {(fun (cur2:<r3  >) -> True)}
                   parameter(unit,{r3  })
                   {(fun (old1:<r3  >) ->
                    (fun (cur3:<r3  >) ->
                    (fun (anon:unit) -> (!! ['a9| r3|] x1 cur3) =['a9||] v)))})) 
  let
    ref ['a10|r4|] = (fun (v1:'a10) ->cap r4 {(fun (cur4:<r4  >) -> True)}
                     parameter(ref(r4,'a10),{r4  })
                     {(fun (old2:<r4  >) ->
                      (fun (cur5:<r4  >) ->
                      (fun (x2:ref(r4,'a10)) ->
                      (!! ['a10| r4|] x2 cur5) =['a10||] v1)))}) 
  logic combine [||'e1 'e2 'e3] : < 'e1 'e2 > -> < 'e2 'e3 > -> < 'e1 'e2 'e3
    >
  logic restrict [||'e11 'e21] : < 'e11 'e21 > -> < 'e21 >
  logic empty  : < >
  let pre ['a11 'b3||] = (fun (x3:'a11 * 'b3) -> fst ['a11,'b3||] x3) 
  let post ['a12 'b4||] = (fun (x4:'a12 * 'b4) -> snd ['a12,'b4||] x4)  end
let
  forto [||'e] = (fun (inv:int -> < 'e > -> prop) ->
                 (fun (start:int) ->
                 (fun (end_:int) ->
                 (fun (f:int ->{ 'e } unit) ->
                 {(fun (cur6:< 'e >) ->
                  (inv start cur6) /\
                  (forall (i:int).
                   ((start <= i) /\ (i <= end_)) ->
                   (forall (m:< 'e >).
                    (inv i m) ->
                    ((pre [int -> < 'e > -> prop,int -> < 'e > -> < 'e > ->
                      unit -> prop||] f i m)
                     /\
                     (forall (n:< 'e >).
                      (post [int -> < 'e > -> prop,int -> < 'e > -> < 'e > ->
                       unit -> prop||] f i m n ())
                      -> (inv (i + 1) n))))))}
                 parameter(unit,{ 'e })
                 {(fun (old3:< 'e >) ->
                  (fun (cur7:< 'e >) ->
                  (fun (anon1:unit) -> inv (max start (end_ + 1)) cur7)))})))) 
let
  fordownto [||'e1] = (fun (inv1:int -> < 'e1 > -> prop) ->
                      (fun (start1:int) ->
                      (fun (end_1:int) ->
                      (fun (f1:int ->{ 'e1 } unit) ->
                      {(fun (cur8:< 'e1 >) ->
                       (inv1 start1 cur8) /\
                       (forall (i1:int).
                        ((end_1 <= i1) /\ (i1 <= start1)) ->
                        (forall (m1:< 'e1 >).
                         (inv1 i1 m1) ->
                         ((pre [int -> < 'e1 > -> prop,int -> < 'e1 > ->
                           < 'e1 > -> unit -> prop||] f1 i1 m1)
                          /\
                          (forall (n1:< 'e1 >).
                           (post [int -> < 'e1 > -> prop,int -> < 'e1 > ->
                            < 'e1 > -> unit -> prop||] f1 i1 m1 n1 ())
                           -> (inv1 (i1 - 1) n1))))))}
                      parameter(unit,{ 'e1 })
                      {(fun (old4:< 'e1 >) ->
                       (fun (cur9:< 'e1 >) ->
                       (fun (anon2:unit) ->
                       inv1 (min start1 (end_1 - 1)) cur9)))})))) 
section Array coq "WhoArray"
  pangoline takeover
   type array['a13||]
  logic ar_empty ['a14||] : array['a14||]
  logic get ['a15||] : int -> (array['a15||]) -> 'a15
  logic set ['a16||] : int -> 'a16 -> (array['a16||]) -> array['a16||]
  logic len ['a17||] : (array['a17||]) -> int
  logic create ['a18||] : int -> 'a18 -> array['a18||]
  axiom update_length : forall ['a19||]. forall (t:array['a19||]).
                                         forall (i2:int).
                                         forall (z:'a19).
                                         (len ['a19||] t) =[int||]
                                         (len ['a19||] (set ['a19||] i2 z t))
  axiom get_set_eq : forall ['a20||]. forall (t1:array['a20||]).
                                      forall (i3:int).
                                      forall (z1:'a20).
                                      (i3 < (len ['a20||] t1)) ->
                                      ((get ['a20||] i3
                                        (set ['a20||] i3 z1 t1))
                                       =['a20||] z1)
  axiom length_empty : forall ['a21||]. (len ['a21||]
                                         (ar_empty ['a21||] : array['a21||]))
                                        =[int||] 0
  axiom get_set_neq : forall ['a22||]. forall (t2:array['a22||]).
                                       forall (i4:int).
                                       forall (j:int).
                                       forall (z2:'a22).
                                       (i4 < (len ['a22||] t2)) ->
                                       ((j < (len ['a22||] t2)) ->
                                        ((i4 <>[int||] j) ->
                                         ((get ['a22||] i4
                                           (set ['a22||] j z2 t2))
                                          =['a22||] (get ['a22||] i4 t2))))
  axiom length_nonnegative : forall ['a23||]. forall (t3:array['a23||]).
                                              0 <= (len ['a23||] t3)
  axiom length_create : forall ['a24||]. forall (l:int).
                                         forall (v2:'a24).
                                         (0 <= l) ->
                                         ((len ['a24||]
                                           (create ['a24||] l v2))
                                          =[int||] l)
  axiom length_access : forall ['a25||]. forall (i5:int).
                                         forall (l1:int).
                                         forall (v3:'a25).
                                         (0 <= i5) ->
                                         ((i5 <= l1) ->
                                          ((get ['a25||] i5
                                            (create ['a25||] l1 v3))
                                           =['a25||] v3)) end
section List coq "WhoList"
  pangoline takeover
   type list['a26||]
  logic nil ['a27||] : list['a27||]
  logic cons ['a28||] : 'a28 -> (list['a28||]) -> list['a28||]
  logic is_nil ['a29||] : (list['a29||]) -> bool
  logic l_in ['a30||] : 'a30 -> (list['a30||]) -> prop end
