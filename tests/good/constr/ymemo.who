type bool
  logic true : bool
  logic false : bool
logic = ['a||] : 'a -> 'a -> prop
  logic /\ : prop -> prop -> prop
  logic \/ : prop -> prop -> prop
  logic -> : prop -> prop -> prop
type hmap ['a 'b||]
logic hmem ['a 'b||]: 'a -> ('a,'b) hmap -> bool
logic hget ['a 'b||]: 'a -> ('a,'b) hmap -> 'b
logic hset ['a 'b||]: 'a -> 'b -> ('a,'b) hmap -> ('a,'b) hmap
type unit
logic tt : unit
logic !! ['a|r|'e] : ref(r,'a) -> <r 'e > -> 'a
parameter ! ['a|r|] (x : ref(r,'a)) : 'a, {r} =
  {}
  {r : !!x = r /\ !!x|old = !!x}

parameter := ['a|r|] (x : ref(r,'a)) (v : 'a) : unit, {r} =
  {}
  { !!x = v}

let stores (f0 : int -> int) (m : (int,int) hmap) =
  forall (x : int). hmem x m = true -> hget x m = f0 x

letregion t
logic table : ref(t, (int,int) hmap)

let realizes (f0 : int -> int) ( f : int ->{t|} int) =
  forall (x : int). [[ stores f0 !!table]] f x [[ stores f0 !!table]]

let ymemo (f0 : int -> int) 
          (ff : (int ->{t|} int) ->{|} int ->{t|} int) = 
  { forall (k : int ->{t|} int).
    [[ realizes f0 k]] ff k [[ r : realizes f0 r ]] }
  let rec (f : int ->{t|} int) (x : int) =
    { stores f0 (!!table) }
    if hmem x (!table) then hget x (!table)
    else
      let z = ff f x in
      let k = table := hset  x z (!table) in
      z
    {r : r = f0 x /\ stores f0 (!!table)}
  in
  f
  { rf : realizes f0 rf }
      
(* 
logic Fib : int -> int
axiom fib_zero : forall (n:int). n <= 1 -> Fib n = 1
axiom fib_succ : forall (n:int). 1 < n -> Fib n = Fib (n-1) + Fib (n-2)

logic arg : int

let main () = 
  { stores Fib cur }
  ymemo Fib
  (fun (f : int ->{table} int) (n : int) ->
    { stores Fib cur /\ realizes Fib f }
    if n <= 1 then 1 else f (n-1) + f (n-2)
    {r : r = Fib n /\ stores Fib cur}
  ) arg
  {r : r = Fib arg}
  
  *)

(* une note : ymemo sans etat *)
(*
let realizes (f0 : int -> int) (f : int ->{t|} int) =
  forall (x : int).
    { stores f0 (!!table)} f x {r : r = f0 x /\ stores f0 (!!table) }

let ymemo (f0 : int -> int)
          (ff : (int ->{t|} int) ->{|} int ->{t|} int) = 
  { forall (k : int ->{t|} int ).
    {realizes f0 k} ff k { r : realizes f0 r } }
  ...
  { rf : realizes f0 rf }

  *)
