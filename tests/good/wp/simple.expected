type unit
logic tt  : unit
logic = ['a||] : a -> a -> prop
logic /\  : prop -> prop -> prop
logic \/  : prop -> prop -> prop
logic ->  : prop -> prop -> prop
logic ~  : prop -> prop
logic mk_2tuple ['a 'b||] : a -> b -> a * b
logic get_2_2_tuple ['a 'b||] : (a * b) -> b
logic get_2_1_tuple ['a 'b||] : (a * b) -> a
logic t  : prop
let
  logic myget [|r|] = mk_2tuple [unit -> <r > -> prop,unit -> <r > -> <r > ->
                      unit -> prop||]
                      (fun (x:unit) -> (fun (c:<r >) -> True))
                      (fun (x:unit) ->
                      (fun (o:<r >) ->
                      (fun (c:<r >) -> (fun (r1:unit) -> True)))) 
goal blit_correct:
  forall [|s|]. forall (s1:<s >).
                (9 =[int||] 0) ->
                (t ->
                 (get_2_1_tuple [unit -> <s > -> prop,unit -> <s > -> <s > ->
                  unit -> prop||] myget [| s|] tt s1))
let
  logic blit [|s|] = mk_2tuple [unit -> <s > -> prop,unit -> <s > -> <s > ->
                     unit -> prop||]
                     (fun (x:unit) -> (fun (c:<s >) -> t /\ (9 =[int||] 0)))
                     (fun (x:unit) ->
                     (fun (a:<s >) ->
                     (fun (c:<s >) -> (fun (a1:unit) -> True)))) 
