type unit
logic tt  : unit
logic , ['a 'b||] : (a) -> (b) -> (a) * (b)
logic t  : prop
logic /\  : prop -> prop -> prop
logic ->  : prop -> prop -> prop
logic = ['a1||] : (a1) -> (a1) -> prop
logic fst ['a2 'b1||] : ((a2) * (b1)) -> a2
logic snd ['a3 'b2||] : ((a3) * (b2)) -> b2
let
  logic ! [|r|] = (fun (x:unit) -> (fun (c:<r  >) -> True)) ,[(unit) -> <r
                   > -> prop,(unit) -> <r  > -> <r  > -> (unit) -> prop||]
                  (fun (x:unit) ->
                  (fun (o:<r  >) ->
                  (fun (c1:<r  >) -> (fun (r1:unit) -> True)))) 
goal blit_correct : forall [|s|]. forall (s1:<s  >).
                                  (9 =[int||] 0) ->
                                  (t ->
                                   (fst [(unit) -> <s  > -> prop,(unit) -> <s
                                     > -> <s  > -> (unit) -> prop||] ! [| s|]
                                    tt s1))
let
  logic blit [|s|] = (fun (x1:unit) ->
                     (fun (c2:<s  >) -> t /\ (9 =[int||] 0))) ,[(unit) -> <s
                      > -> prop,(unit) -> <s  > -> <s  > -> (unit) -> prop||]
                     (fun (x1:unit) ->
                     (fun (a4:<s  >) ->
                     (fun (c3:<s  >) -> (fun (a5:unit) -> True)))) 
