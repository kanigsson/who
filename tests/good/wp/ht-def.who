type hmap['a1
'b||]
logic hmem ['a2 'b1||] : (a2) -> (hmap[(a2),(b1)||]) -> bool
logic hget ['a3 'b2||] : (a3) -> (hmap[(a3),(b2)||]) -> b2
logic hset ['a4 'b3||] : (a4) -> (b3) -> (hmap[(a4),(b3)||]) ->
  hmap[(a4),(b3)||]
let
  stores  = (fun (f:int -> int) ->
            (fun (m:hmap[int,int||]) ->
            forall (x2:int).
            ((hmem [int,int||] x2 m) =[bool||] true) ->
            ((hget [int,int||] x2 m) =[int||] (f x2)))) 
letregion t
logic table  : ref(t,hmap[int,int||])
let
  realizes  = (fun (f1:int -> int) ->
              (fun (f2:int ->{t  } int) ->
              forall (x3:int).
              [[(fun (cur4:<t  >) ->
                stores f1 (!! [hmap[int,int||]| t| { }] table cur4))]]
              f2 x3[[(fun (old2:<t  >) ->
                     (fun (cur5:<t  >) ->
                     (fun (anon1:int) ->
                     stores f1 (!! [hmap[int,int||]| t| { }] table cur5))))]])) 
