type unit
logic tt  : unit
logic = ['a||] : a -> a -> prop
logic /\  : prop -> prop -> prop
logic ->  : prop -> prop -> prop
logic mk_2tuple ['a1 'b||] : a1 -> b -> a1 * b
logic restrict [||'e 'e1] : <{ 'e 'e1 }> -> <{ 'e1 }>
logic combine [||'e2 'e3 'e4] : <{ 'e2 'e3 }> -> <{ 'e3 'e4 }> -> <{ 'e2 'e3
  'e4 }>
logic fst ['a2 'b1||] : (a2 * b1) -> a2
logic snd ['a3 'b2||] : (a3 * b2) -> b2
logic !! ['a4|r|'e5] : ref(r,a4) -> <{r  'e5 }> -> a4
let
  logic ! ['a5|r1|] = (fun (x:ref(r1,a5)) -> (fun (cur:<{r1  }>) -> True))
                      mk_2tuple[ref(r1,a5) -> <{r1  }> -> prop,ref(r1,a5) ->
                      <{r1  }> -> <{r1  }> -> a5 -> prop||]
                      (fun (x:ref(r1,a5)) ->
                      (fun (old:<{r1  }>) ->
                      (fun (cur1:<{r1  }>) ->
                      (fun (r2:a5) ->
                      ((!! [a5| r1| { }] x cur1) =[a5||] r2) /\
                      ((!! [a5| r1| { }] x old) =[a5||]
                       (!! [a5| r1| { }] x cur1)))))) 
let logic pre ['a6 'b3||] = (fun (x1:a6 * b3) -> fst [a6,b3||] x1) 
let logic post ['a7 'b4||] = (fun (x2:a7 * b4) -> snd [a7,b4||] x2) 
logic <=  : int -> int -> prop
logic <  : int -> int -> prop
logic +  : int -> int -> int
logic -  : int -> int -> int
logic int_max  : int -> int -> int
type array['a8||]
logic len ['a9||] : array[a9||] -> int
logic get ['a10||] : int -> array[a10||] -> a10
let
  logic forto [||'e6] = (fun (inv:int -> <{ 'e6 }> -> prop) ->
                        (fun (start:int) ->
                        (fun (end_:int) ->
                        (fun (f:(int -> <{ 'e6 }> -> prop) * (int -> <{ 'e6
                        }> -> <{ 'e6 }> -> unit -> prop)) ->
                        (fun (cur2:<{ 'e6 }>) ->
                        (inv start cur2) /\
                        (forall (i:int).
                         (start <= i) ->
                         ((i <= end_) ->
                          (forall (m:<{ 'e6 }>).
                           (inv i m) ->
                           ((pre [int -> <{ 'e6 }> -> prop,int -> <{ 'e6
                             }> -> <{ 'e6 }> -> unit -> prop||] f i m)
                            /\
                            (forall (n:<{ 'e6 }>).
                             (post [int -> <{ 'e6 }> -> prop,int -> <{ 'e6
                              }> -> <{ 'e6 }> -> unit -> prop||] f i m n tt)
                             -> (inv (i + 1) n))))))))
                        mk_2tuple[((int -> <{ 'e6 }> -> prop) * (int ->
                        <{ 'e6 }> -> <{ 'e6 }> -> unit -> prop)) -> <{ 'e6
                        }> -> prop,((int -> <{ 'e6 }> -> prop) * (int ->
                        <{ 'e6 }> -> <{ 'e6 }> -> unit -> prop)) -> <{ 'e6
                        }> -> <{ 'e6 }> -> unit -> prop||]
                        (fun (f:(int -> <{ 'e6 }> -> prop) * (int -> <{ 'e6
                        }> -> <{ 'e6 }> -> unit -> prop)) ->
                        (fun (old1:<{ 'e6 }>) ->
                        (fun (cur3:<{ 'e6 }>) ->
                        (fun (anon:unit) ->
                        inv (int_max start (end_ + 1)) cur3))))))) 
goal iter_correct : forall ['a11|t|'e7]. forall (inv1:<{t  'e7 }> -> int ->
                                         prop).
                                         forall (ar:ref(t,array[a11||])).
                                         forall (f1:(a11 -> <{t  'e7 }> ->
                                         prop) * (a11 -> <{t  'e7 }> -> <{t
                                          'e7 }> -> unit -> prop)).
                                         forall (s:<{t  'e7 }>).
                                         (inv1 s 0) ->
                                         ((forall (i1:int).
                                           (0 <= i1) ->
                                           ((i1 <
                                             (len [a11||]
                                              (!! [array[a11||]| t| { 'e7 }]
                                               ar s)))
                                            ->
                                            (forall (s1:<{t  'e7 }>).
                                             (inv1 s1 i1) ->
                                             ((fst [ref(t,array[a11||]) ->
                                               <{t  }> ->
                                               prop,ref(t,array[a11||]) ->
                                               <{t  }> -> <{t  }> ->
                                               array[a11||] -> prop||]
                                               ! [array[a11||]| t|] ar
                                               (restrict [|| { 'e7 } {t  }]
                                                s1))
                                              /\
                                              (forall (s2:<{t  }>).
                                               forall (anon1:array[a11||]).
                                               (snd [ref(t,array[a11||]) ->
                                                <{t  }> ->
                                                prop,ref(t,array[a11||]) ->
                                                <{t  }> -> <{t  }> ->
                                                array[a11||] -> prop||]
                                                ! [array[a11||]| t|] ar
                                                (restrict [|| { 'e7 } {t  }]
                                                 s1)
                                                s2 anon1)
                                               ->
                                               ((fst [a11 -> <{t  'e7 }> ->
                                                 prop,a11 -> <{t  'e7 }> ->
                                                 <{t  'e7 }> -> unit ->
                                                 prop||] f1
                                                 (get [a11||] i1 anon1)
                                                 (combine [|| { 'e7 } {t  }
                                                  { }] s1 s2))
                                                /\
                                                (forall (s3:<{t  'e7 }>).
                                                 (snd [a11 -> <{t  'e7 }> ->
                                                  prop,a11 -> <{t  'e7 }> ->
                                                  <{t  'e7 }> -> unit ->
                                                  prop||] f1
                                                  (get [a11||] i1 anon1)
                                                  (combine [|| { 'e7 } {t  }
                                                   { }] s1 s2)
                                                  s3 tt)
                                                 -> (inv1 s3 (i1 + 1)))))))))
                                          ->
                                          (let logic __start = 0 in
                                           (fst [ref(t,array[a11||]) -> <{t
                                             }> ->
                                            prop,ref(t,array[a11||]) -> <{t
                                             }> -> <{t  }> -> array[a11||] ->
                                            prop||] ! [array[a11||]| t|] ar
                                            (restrict [|| { 'e7 } {t  }] s))
                                           /\
                                           (forall (s4:<{t  }>).
                                            forall (anon2:array[a11||]).
                                            (snd [ref(t,array[a11||]) -> <{t
                                              }> ->
                                             prop,ref(t,array[a11||]) -> <{t
                                              }> -> <{t  }> ->
                                             array[a11||] -> prop||]
                                             ! [array[a11||]| t|] ar
                                             (restrict [|| { 'e7 } {t  }] s)
                                             s4 anon2)
                                            ->
                                            (let
                                             logic __end =
                                                          (len [a11||] anon2)
                                                          - 1
                                             in
                                             ((forall (i2:int).
                                               forall (s5:<{t  'e7 }>).
                                               (__start <= i2) ->
                                               ((i2 <= __end) ->
                                                ((inv1 s5 i2) ->
                                                 ((fst [ref(t,array[a11||]) ->
                                                   <{t  }> ->
                                                   prop,ref(t,array[a11||]) ->
                                                   <{t  }> -> <{t  }> ->
                                                   array[a11||] -> prop||]
                                                   ! [array[a11||]| t|] ar
                                                   (restrict [|| { 'e7 } {t
                                                     }] s5))
                                                  /\
                                                  (forall (s6:<{t  }>).
                                                   forall (anon3:array[a11||]).
                                                   (snd [ref(t,array[a11||]) ->
                                                    <{t  }> ->
                                                    prop,ref(t,array[a11||]) ->
                                                    <{t  }> -> <{t  }> ->
                                                    array[a11||] -> prop||]
                                                    ! [array[a11||]| t|] ar
                                                    (restrict [|| { 'e7 } {t
                                                      }] s5)
                                                    s6 anon3)
                                                   ->
                                                   ((fst [a11 -> <{t  'e7
                                                     }> -> prop,a11 -> <{t
                                                      'e7 }> -> <{t  'e7
                                                     }> -> unit -> prop||] f1
                                                     (get [a11||] i2 anon3)
                                                     (combine [|| { 'e7 } {t
                                                       } { }] s5 s6))
                                                    /\
                                                    (forall (s7:<{t  'e7 }>).
                                                     (snd [a11 -> <{t  'e7
                                                      }> -> prop,a11 -> <{t
                                                       'e7 }> -> <{t  'e7
                                                      }> -> unit -> prop||]
                                                      f1
                                                      (get [a11||] i2 anon3)
                                                      (combine [|| { 'e7 } {t
                                                        } { }] s5 s6)
                                                      s7 tt)
                                                     -> (inv1 s7 (i2 + 1)))))))))
                                              /\
                                              (fst [((int -> <{t  'e7 }> ->
                                               prop) * (int -> <{t  'e7 }> ->
                                               <{t  'e7 }> -> unit ->
                                               prop)) -> <{t  'e7 }> ->
                                               prop,((int -> <{t  'e7 }> ->
                                               prop) * (int -> <{t  'e7 }> ->
                                               <{t  'e7 }> -> unit ->
                                               prop)) -> <{t  'e7 }> -> <{t
                                                'e7 }> -> unit -> prop||]
                                               (forto [|| {t  'e7 }]
                                                (fun (i3:int) ->
                                                (fun (cur4:<{t  'e7 }>) ->
                                                inv1 cur4 i3)) __start __end)
                                               ((fun (i4:int) ->
                                                (fun (cur5:<{t  'e7 }>) ->
                                                ((__start <= i4) /\
                                                 (i4 <= __end))
                                                /\ (inv1 cur5 i4)))
                                                mk_2tuple[int -> <{t  'e7
                                                }> -> prop,int -> <{t  'e7
                                                }> -> <{t  'e7 }> -> unit ->
                                                prop||]
                                                (fun (i5:int) ->
                                                (fun (anon4:<{t  'e7 }>) ->
                                                (fun (cur6:<{t  'e7 }>) ->
                                                (fun (anon5:unit) ->
                                                inv1 cur6 (i5 + 1))))))
                                               (combine [|| { 'e7 } {t  }
                                                { }] s s4)))
                                             /\
                                             (forall (s8:<{t  'e7 }>).
                                              (snd [((int -> <{t  'e7 }> ->
                                               prop) * (int -> <{t  'e7 }> ->
                                               <{t  'e7 }> -> unit ->
                                               prop)) -> <{t  'e7 }> ->
                                               prop,((int -> <{t  'e7 }> ->
                                               prop) * (int -> <{t  'e7 }> ->
                                               <{t  'e7 }> -> unit ->
                                               prop)) -> <{t  'e7 }> -> <{t
                                                'e7 }> -> unit -> prop||]
                                               (forto [|| {t  'e7 }]
                                                (fun (i6:int) ->
                                                (fun (cur7:<{t  'e7 }>) ->
                                                inv1 cur7 i6)) __start __end)
                                               ((fun (i7:int) ->
                                                (fun (cur8:<{t  'e7 }>) ->
                                                ((__start <= i7) /\
                                                 (i7 <= __end))
                                                /\ (inv1 cur8 i7)))
                                                mk_2tuple[int -> <{t  'e7
                                                }> -> prop,int -> <{t  'e7
                                                }> -> <{t  'e7 }> -> unit ->
                                                prop||]
                                                (fun (i8:int) ->
                                                (fun (anon6:<{t  'e7 }>) ->
                                                (fun (cur9:<{t  'e7 }>) ->
                                                (fun (anon7:unit) ->
                                                inv1 cur9 (i8 + 1))))))
                                               (combine [|| { 'e7 } {t  }
                                                { }] s s4)
                                               s8 tt)
                                              ->
                                              (inv1 s8
                                               (len [a11||]
                                                (!! [array[a11||]| t| { 'e7
                                                 }] ar s))))))))
let
  logic iter ['a11|t|'e7] = (fun (inv1:<{t  'e7 }> -> int -> prop) ->
                            (fun (ar:ref(t,array[a11||])) ->
                            (fun (f1:(a11 -> <{t  'e7 }> -> prop) * (a11 ->
                            <{t  'e7 }> -> <{t  'e7 }> -> unit -> prop)) ->
                            (fun (cur10:<{t  'e7 }>) ->
                            (inv1 cur10 0) /\
                            (forall (i9:int).
                             (0 <= i9) ->
                             ((i9 <
                               (len [a11||]
                                (!! [array[a11||]| t| { 'e7 }] ar cur10)))
                              ->
                              (forall (s9:<{t  'e7 }>).
                               (inv1 s9 i9) ->
                               ((fst [ref(t,array[a11||]) -> <{t  }> ->
                                 prop,ref(t,array[a11||]) -> <{t  }> -> <{t
                                  }> -> array[a11||] -> prop||]
                                 ! [array[a11||]| t|] ar
                                 (restrict [|| { 'e7 } {t  }] s9))
                                /\
                                (forall (s10:<{t  }>).
                                 forall (anon8:array[a11||]).
                                 (snd [ref(t,array[a11||]) -> <{t  }> ->
                                  prop,ref(t,array[a11||]) -> <{t  }> -> <{t
                                   }> -> array[a11||] -> prop||]
                                  ! [array[a11||]| t|] ar
                                  (restrict [|| { 'e7 } {t  }] s9) s10 anon8)
                                 ->
                                 ((fst [a11 -> <{t  'e7 }> -> prop,a11 -> <{t
                                    'e7 }> -> <{t  'e7 }> -> unit -> prop||]
                                   f1 (get [a11||] i9 anon8)
                                   (combine [|| { 'e7 } {t  } { }] s9 s10))
                                  /\
                                  (forall (s11:<{t  'e7 }>).
                                   (snd [a11 -> <{t  'e7 }> -> prop,a11 ->
                                    <{t  'e7 }> -> <{t  'e7 }> -> unit ->
                                    prop||] f1 (get [a11||] i9 anon8)
                                    (combine [|| { 'e7 } {t  } { }] s9 s10)
                                    s11 tt)
                                   -> (inv1 s11 (i9 + 1)))))))))))
                            mk_2tuple[((a11 -> <{t  'e7 }> -> prop) * (a11 ->
                            <{t  'e7 }> -> <{t  'e7 }> -> unit -> prop)) ->
                            <{t  'e7 }> -> prop,((a11 -> <{t  'e7 }> ->
                            prop) * (a11 -> <{t  'e7 }> -> <{t  'e7 }> ->
                            unit -> prop)) -> <{t  'e7 }> -> <{t  'e7 }> ->
                            unit -> prop||]
                            (fun (f1:(a11 -> <{t  'e7 }> -> prop) * (a11 ->
                            <{t  'e7 }> -> <{t  'e7 }> -> unit -> prop)) ->
                            (fun (old2:<{t  'e7 }>) ->
                            (fun (cur11:<{t  'e7 }>) ->
                            (fun (anon9:unit) ->
                            inv1 cur11
                            (len [a11||]
                             (!! [array[a11||]| t| { 'e7 }] ar old2)))))))) 
