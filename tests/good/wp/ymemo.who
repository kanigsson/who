type bool
logic true  : bool
logic false  : bool
logic = ['a||] : (a) -> (a) -> prop
logic /\  : prop -> prop -> prop
logic \/  : prop -> prop -> prop
logic ->  : prop -> prop -> prop
logic , ['a 'b||] : 'a -> 'b -> 'a * 'b
logic fst ['a 'b||] : 'a * 'b -> 'a
logic snd ['a 'b||] : 'a * 'b -> 'b
type hmap['a1
'b||]
logic hmem ['a2 'b1||] : (a2) -> (hmap[(a2),(b1)||]) -> bool
logic hget ['a3 'b2||] : (a3) -> (hmap[(a3),(b2)||]) -> b2
logic hset ['a4 'b3||] : (a4) -> (b3) -> (hmap[(a4),(b3)||]) ->
  hmap[(a4),(b3)||]
type unit
logic tt  : unit
logic combine [||'e1 'e2 'e3] : <'e1 'e2> -> <'e2 'e3> -> <'e1 'e2 'e3>
logic restrict [||'e1 'e2] : <'e1 'e2> -> <'e2>
logic empty : < >

logic !! ['a5|r|'e] : ref(r,a5) -> <r  'e > -> a5
let
  ! ['a6|r1|] = (fun (x:ref(r1,a6)) -> {(fun (cur:<r1  >) -> True)}
                parameter(a6,{r1  })
                {(fun (old:<r1  >) ->
                 (fun (cur1:<r1  >) ->
                 (fun (r2:a6) ->
                 ((!! [a6| r1| { }] x cur1) =[a6||] r2) /\
                 ((!! [a6| r1| { }] x old) =[a6||] (!! [a6| r1| { }] x cur1)))))}) 
let
  := ['a7|r3|] = (fun (x1:ref(r3,a7)) ->
                 (fun (v:a7) -> {(fun (cur2:<r3  >) -> True)}
                 parameter(unit,{r3  })
                 {(fun (old1:<r3  >) ->
                  (fun (cur3:<r3  >) ->
                  (fun (anon:unit) -> (!! [a7| r3| { }] x1 cur3) =[a7||] v)))})) 
let
  stores  = (fun (f:int -> int) ->
            (fun (m:hmap[int,int||]) ->
            forall (x2:int).
            ((hmem [int,int||] x2 m) =[bool||] true) ->
            ((hget [int,int||] x2 m) =[int||] (f x2)))) 
letregion t
logic table  : ref(t,hmap[int,int||])
let
  realizes  = (fun (f1:int -> int) ->
              (fun (f2:int ->{t  } int) ->
              forall (x3:int).
              [[(fun (cur4:<t  >) ->
                stores f1 (!! [hmap[int,int||]| t| { }] table cur4))]]
              f2 x3[[(fun (old2:<t  >) ->
                     (fun (cur5:<t  >) ->
                     (fun (anon1:int) ->
                     stores f1 (!! [hmap[int,int||]| t| { }] table cur5))))]])) 
let
  ymemo  = (fun (f3:int -> int) ->
           (fun (ff:(int ->{t  } int) ->{ } int ->{t  } int) ->
           {(fun (cur6:< >) ->
            forall (k:int ->{t  } int).
            [[(fun (cur7:< >) -> realizes f3 k)]]ff k[[(fun (old3:< >) ->
                                                       (fun (cur8:< >) ->
                                                       (fun (r4:(int -> <t
                                                        > -> prop) * (int ->
                                                       <t  > -> <t  > ->
                                                       int -> prop)) ->
                                                       realizes f3 r4)))]])}
           let rec(int ->{t
            } int) f4 =
                       (fun (x4:int) ->
                       {(fun (cur9:<t  >) ->
                        stores f3 (!! [hmap[int,int||]| t| { }] table cur9))}
                       let anf = ! [hmap[int,int||]| t|] table in
                       if hmem [int,int||] x4 anf then
                       let anf1 = ! [hmap[int,int||]| t|] table in
                       hget [int,int||] x4 anf1 else
                       let anf2 = ff f4 in
                       let z = anf2 x4 in
                       let anf3 = ! [hmap[int,int||]| t|] table in
                       let
                       k1 =
                           table :=[hmap[int,int||]| t|]
                           (hset [int,int||] x4 z anf3)
                       in z
                       {(fun (old4:<t  >) ->
                        (fun (cur10:<t  >) ->
                        (fun (r5:int) ->
                        (r5 =[int||] (f3 x4)) /\
                        (stores f3 (!! [hmap[int,int||]| t| { }] table cur10)))))})
           in f4
           {(fun (old5:< >) ->
            (fun (cur11:< >) ->
            (fun (rf:(int -> <t  > -> prop) * (int -> <t  > -> <t  > ->
            int -> prop)) -> realizes f3 rf)))})) 
