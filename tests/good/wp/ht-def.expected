type unit
type bool
logic true  : bool
logic false  : bool
logic /\  : prop -> prop -> prop
logic \/  : prop -> prop -> prop
logic !! ['a|r|'e] : ref(r,a) -> <r 'e> -> a
logic ->  : prop -> prop -> prop
logic ~  : prop -> prop
logic = ['a||] : a -> a -> prop
logic mk_2tuple ['a 'b||] : a -> b -> a * b
logic get_2_2_tuple ['a 'b||] : (a * b) -> b
logic get_2_1_tuple ['a 'b||] : (a * b) -> a
type hmap['a 'b||]
logic hmem ['a 'b||] : a -> hmap[a,b] -> bool
logic hget ['a 'b||] : a -> hmap[a,b] -> b
logic hset ['a 'b||] : a -> b -> hmap[a,b] -> hmap[a,b]
let
  logic stores  = (fun (f:int -> int) ->
                  (fun (m:hmap[int,int]) ->
                  forall (x:int).
                  (true =[bool||] (hmem [int,int||] x m)) ->
                  ((hget [int,int||] x m) =[int||] (f x)))) 
INTROS [|t|]
logic table  : ref(t,hmap[int,int])
let
  logic realizes  = (fun (f:int -> int) ->
                    (fun (f1:(int -> <t > -> prop) * (int -> <t > -> <t > ->
                    int -> prop)) ->
                    forall (x:int).
                    forall (s:<t >).
                    (stores f (!! [hmap[int,int]| t| { }] table s)) ->
                    ((get_2_1_tuple [int -> <t > -> prop,int -> <t > ->
                      <t > -> int -> prop||] f1 x s)
                     /\
                     (forall (s1:<t >).
                      forall (anon:int).
                      (get_2_2_tuple [int -> <t > -> prop,int -> <t > ->
                       <t > -> int -> prop||] f1 x s s1 anon)
                      -> (stores f (!! [hmap[int,int]| t| { }] table s1)))))) 
