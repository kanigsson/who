type unit
logic tt : unit
logic /\ : prop -> prop -> prop
logic \/ : prop -> prop -> prop
logic -> : prop -> prop -> prop
logic mk_2tuple ['a 'b||] : 'a -> 'b -> 'a * 'b
logic get_2_1_tuple ['a 'b||] : 'a * 'b -> 'a
logic get_2_2_tuple ['a 'b||] : 'a * 'b -> 'b

logic combine [||'e1 'e2 'e3] : <'e1 'e2> -> <'e2 'e3> -> <'e1 'e2 'e3>
logic restrict [||'e1 'e2] : <'e1 'e2> -> <'e2>
logic empty : < >

logic = ['a||] : 'a -> 'a -> prop
logic !! ['a|r|'e] : ref(r,'a) -> <r 'e > -> 'a
parameter ! ['a|r|] (x : ref(r,'a)) : 'a, {r + } =
  {}
  {r : !!x = r }

parameter := ['a|r|] (x : ref(r,'a)) (v : 'a) : unit, {r} =
  {}
  { !!x = v}

let  f [|r|] (x : ref(r,int)) =
  {}
  let z = !x in
  let u = x := z in
  !x
  { r : r = !!x }
