type unit
logic +  : int -> int -> int
logic = ['a||] : a -> a -> prop
logic /\  : prop -> prop -> prop
logic !! ['a|r|'e] : ref(r,a) -> <r 'e> -> a
let
  ! ['a|r|] = (fun (x:ref(r,a)) -> {(fun (cur:<r >) -> True)}
              parameter(a,{r } + {r })
              {(fun (old:<r >) ->
               (fun (cur:<r >) ->
               (fun (r1:a) ->
               (r1 =[a||] (!! [a| r| { }] x cur)) /\
               ((!! [a| r| { }] x old) =[a||] (!! [a| r| { }] x cur)))))}) 
let
  f [|r|] = (fun (x:ref(r,int)) -> {(fun (cur:<r >) -> True)}
            let anf = ! [int| r|] x in anf + 1
            {(fun (old:<r >) -> (fun (cur:<r >) -> (fun (anon:int) -> True)))}) 
