type unit
logic /\  : prop -> prop -> prop
logic ~  : prop -> prop
logic = ['a||] : a -> a -> prop
logic !! ['a|r|'e] : ref(r,a) -> < 'e> -> a
let
  ! ['a|r|] = (fun (x:ref(r,a)) -> {(fun (cur:<r >) -> True)}
              parameter(a,{ } + {r })
              {(fun (old:<r >) ->
               (fun (cur:<r >) ->
               (fun (r1:a) ->
               (r1 =[a||] (!! [a| r| {r }] x cur)) /\
               ((!! [a| r| {r }] x old) =[a||] (!! [a| r| {r }] x cur)))))}) 
let seq ['a 'b 'c||'e
  'e1] = (fun (f:a ->{{ } + { 'e}} b) ->
         (fun (g:b ->{{ } + { 'e1}} c) ->
         (fun (x:a) -> {(fun (cur:< 'e 'e1>) -> True)} let anf = f x in g anf
         {(fun (old:< 'e 'e1>) ->
          (fun (cur:< 'e 'e1>) -> (fun (anon:c) -> True)))}))) 
let h [|r
  r1|] = (fun (a:ref(r,int)) ->
         (fun (b:ref(r1,int)) -> {(fun (cur:< >) -> True)}
         seq [int,int,int|| {r } {r1 }]
         (fun (c:int) -> {(fun (cur:<r >) -> True)} ! [int| r|] a
         {(fun (old:<r >) -> (fun (cur:<r >) -> (fun (anon:int) -> True)))})
         (fun (d:int) -> {(fun (cur:<r1 >) -> True)} ! [int| r1|] b
         {(fun (old:<r1 >) -> (fun (cur:<r1 >) -> (fun (anon:int) -> True)))})
         {(fun (old:< >) ->
          (fun (cur:< >) ->
          (fun (anon:(int -> <r r1 > -> prop) * (int -> <r r1 > -> <r r1 > ->
          int -> prop)) -> True)))})) 
