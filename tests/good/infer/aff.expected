section basiclogic coq predefined
  pangoline predefined
   logic /\  : Prop -> Prop -> Prop
  logic \/  : Prop -> Prop -> Prop
  logic ->  : Prop -> Prop -> Prop
  logic ~  : Prop -> Prop
  logic = ['a||] : 'a -> 'a -> Prop
  logic <> ['a1||] : 'a1 -> 'a1 -> Prop
  logic fst ['a2 'b||] : ('a2 * 'b) -> 'a2
  logic snd ['a3 'b1||] : ('a3 * 'b1) -> 'b1
  logic , ['a4 'b2||] : 'a4 -> 'b2 -> 'a4 * 'b2 end
section arith coq "WhoArith"
  pangoline predefined
   logic +  : int -> int -> int
  logic -  : int -> int -> int
  logic *  : int -> int -> int
  logic <  : int -> int -> Prop
  logic <=  : int -> int -> Prop
  logic >  : int -> int -> Prop
  logic >=  : int -> int -> Prop
  logic <<  : int -> int -> bool
  logic <<=  : int -> int -> bool
  logic >>  : int -> int -> bool
  logic >>=  : int -> int -> bool
  logic max  : int -> int -> int
  logic min  : int -> int -> int
  logic mod  : int -> int -> int
  logic band  : bool -> bool -> bool
  logic bor  : bool -> bool -> bool end
logic == ['a5||] : 'a5 -> 'a5 -> bool
logic != ['a6||] : 'a6 -> 'a6 -> bool
section Whoref coq "WhoMap"
  pangoline predefined
   logic !! ['a7|r|'e] : ref(r,'a7) -> < 'e > -> 'a7
  let
    ! ['a8|r1|] = (fun (x:ref(r1,'a8)) ->  parameter('a8,{r1  })
                  {(fun (old:<r1  >) ->
                   (fun (cur:<r1  >) ->
                   (fun (r2:'a8) ->
                   ((!! ['a8|r1|{r1|}] x cur) =['a8||] r2) /\
                   ((!! ['a8|r1|{r1|}] x old) =['a8||]
                    (!! ['a8|r1|{r1|}] x cur)))))}) 
  let
    := ['a9|r3|] = (fun (x1:ref(r3,'a9)) ->
                   (fun (v:'a9) ->  parameter(unit,{r3  })
                   {(fun (old1:<r3  >) ->
                    (fun (cur1:<r3  >) ->
                    (fun (anon:unit) ->
                    (!! ['a9|r3|{r3|}] x1 cur1) =['a9||] v)))})) 
  let
    ref ['a10|r4|] = (fun (v1:'a10) ->cap r4  parameter(ref(r4,'a10),{r4  })
                     {(fun (old2:<r4  >) ->
                      (fun (cur2:<r4  >) ->
                      (fun (x2:ref(r4,'a10)) ->
                      (!! ['a10|r4|{r4|}] x2 cur2) =['a10||] v1)))}) 
  logic combine [||'e1] : < 'e1 > -> < 'e1 > -> < 'e1 >
  logic restrict [||'e1 'e2] : < 'e1 > -> < 'e2 >
  logic empty  : < >
  type kmap
  type key
  logic kcombine [||'e11 'e21] : (kmap) -> (kmap) -> kmap
  logic krestrict [||'e12 'e22] : (kmap) -> kmap
  logic kset ['a11||] : (key) -> 'a11 -> (kmap) -> kmap
  logic kget ['a12|r5|] : ref(r5,'a12) -> (kmap) -> 'a12
  logic kempty  : kmap
  let pre ['a13 'b3||] = (fun (x3:'a13 * 'b3) -> fst ['a13,'b3||] x3) 
  let post ['a14 'b4||] = (fun (x4:'a14 * 'b4) -> snd ['a14,'b4||] x4)  end
let
  forto [||'e2] = (fun (inv:int -> < 'e2 > -> Prop) ->
                  (fun (start:int) ->
                  (fun (end_:int) ->
                  (fun (f:int ->{ 'e2 } unit) ->
                  {(fun (cur3:< 'e2 >) ->
                   (inv start cur3) /\
                   (forall (i:int).
                    ((start <= i) /\ (i <= end_)) ->
                    (forall (m:< 'e2 >).
                     (inv i m) ->
                     ((pre [int -> <e2> -> Prop,int -> <e2> -> <e2> ->
                       unit -> Prop||] f i m)
                      /\
                      (forall (n:< 'e2 >).
                       (post [int -> <e2> -> Prop,int -> <e2> -> <e2> ->
                        unit -> Prop||] f i m n tt)
                       -> (inv (i + 1) n))))))}
                  parameter(unit,{ 'e2 })
                  {(fun (old3:< 'e2 >) ->
                   (fun (cur4:< 'e2 >) ->
                   (fun (anon1:unit) -> inv (max start (end_ + 1)) cur4)))})))) 
let
  fordownto [||'e3] = (fun (inv1:int -> < 'e3 > -> Prop) ->
                      (fun (start1:int) ->
                      (fun (end_1:int) ->
                      (fun (f1:int ->{ 'e3 } unit) ->
                      {(fun (cur5:< 'e3 >) ->
                       (inv1 start1 cur5) /\
                       (forall (i1:int).
                        ((end_1 <= i1) /\ (i1 <= start1)) ->
                        (forall (m1:< 'e3 >).
                         (inv1 i1 m1) ->
                         ((pre [int -> <e3> -> Prop,int -> <e3> -> <e3> ->
                           unit -> Prop||] f1 i1 m1)
                          /\
                          (forall (n1:< 'e3 >).
                           (post [int -> <e3> -> Prop,int -> <e3> -> <e3> ->
                            unit -> Prop||] f1 i1 m1 n1 tt)
                           -> (inv1 (i1 - 1) n1))))))}
                      parameter(unit,{ 'e3 })
                      {(fun (old4:< 'e3 >) ->
                       (fun (cur6:< 'e3 >) ->
                       (fun (anon2:unit) ->
                       inv1 (min start1 (end_1 - 1)) cur6)))})))) 
section Array coq "WhoArray"
  pangoline takeover
   type array['a15||]
  logic ar_empty ['a16||] : array['a16||]
  logic get ['a17||] : int -> (array['a17||]) -> 'a17
  logic set ['a18||] : int -> 'a18 -> (array['a18||]) -> array['a18||]
  logic len ['a19||] : (array['a19||]) -> int
  logic create ['a20||] : int -> 'a20 -> array['a20||]
  axiom update_length : forall ['a21||]. forall (t:array['a21||]).
                                         forall (i2:int).
                                         forall (z:'a21).
                                         (len ['a21||] t) =[int||]
                                         (len ['a21||] (set ['a21||] i2 z t))
  axiom get_set_eq : forall ['a22||]. forall (t1:array['a22||]).
                                      forall (i3:int).
                                      forall (z1:'a22).
                                      (i3 < (len ['a22||] t1)) ->
                                      ((get ['a22||] i3
                                        (set ['a22||] i3 z1 t1))
                                       =['a22||] z1)
  axiom length_empty : forall ['a23||]. (len ['a23||]
                                         (ar_empty ['a23||] : array['a23||]))
                                        =[int||] 0
  axiom get_set_neq : forall ['a24||]. forall (t2:array['a24||]).
                                       forall (i4:int).
                                       forall (j:int).
                                       forall (z2:'a24).
                                       (i4 < (len ['a24||] t2)) ->
                                       ((j < (len ['a24||] t2)) ->
                                        ((i4 <>[int||] j) ->
                                         ((get ['a24||] i4
                                           (set ['a24||] j z2 t2))
                                          =['a24||] (get ['a24||] i4 t2))))
  axiom length_nonnegative : forall ['a25||]. forall (t3:array['a25||]).
                                              0 <= (len ['a25||] t3)
  axiom length_create : forall ['a26||]. forall (l:int).
                                         forall (v2:'a26).
                                         (0 <= l) ->
                                         ((len ['a26||]
                                           (create ['a26||] l v2))
                                          =[int||] l)
  axiom length_access : forall ['a27||]. forall (i5:int).
                                         forall (l1:int).
                                         forall (v3:'a27).
                                         (0 <= i5) ->
                                         ((i5 <= l1) ->
                                          ((get ['a27||] i5
                                            (create ['a27||] l1 v3))
                                           =['a27||] v3)) end
section List coq "WhoList"
  pangoline takeover
   type list['a28||]
  logic nil ['a29||] : list['a29||]
  logic cons ['a30||] : 'a30 -> (list['a30||]) -> list['a30||]
  logic is_nil ['a31||] : (list['a31||]) -> bool
  logic l_in ['a32||] : 'a32 -> (list['a32||]) -> Prop end
let f2 [|r6|] = (fun (x5:ref(r6,int)) ->  x5 :=[int|r6|] 0 ) 
