logic = ['a||] : (a) -> (a) -> prop
logic ->  : prop -> prop -> prop
logic <=  : int -> int -> prop
logic +  : int -> int -> int
logic *  : int -> int -> int
logic -  : int -> int -> int
type bool
logic == ['a1||] : (a1) -> (a1) -> bool
logic fact  : int -> int
axiom fact_zero : (fact 0) = 1
axiom fact_step : forall (n:int).
                  (0 <= n) -> ((fact (n + 1)) = (n * (fact n)))
let
  rec(int ->{ } int) f  = (fun (x:int) -> {0 <= x}
                          if x == 0 then 1 else x * (f (x - 1))
                          { r : r = (fact x)}) 
