let /\ = logic prop -> prop -> prop in
let -> = logic prop -> prop -> prop in
let = ['a||]= logic 'a -> 'a -> prop in
let <> ['a1||]= logic 'a1 -> 'a1 -> prop in
let == ['a2||]= logic 'a2 -> 'a2 -> bool in
let != ['a3||]= logic 'a3 -> 'a3 -> bool in
let !! ['a4|r|e]= logic ref(r,'a4) -> map{|e } -> 'a4 in
let
! ['a5|r1|]=
            (λ(x:ref(r1,'a5)) -->  param('a5,{r1 |})
            { r2 : ((!! x cur) = r2) /\ ((!! x old) = (!! x cur))})
in
let
:= ['a6|r3|]=
             (λ(x1:ref(r3,'a6)) ->
             (λ(v:'a6) -->  param(unit,{r3 |}) {(!! x1 cur1) = v}))
in
let
ref ['a7|r4|]=
              (λ(v1:'a7) -->  param(ref(r4,'a7),{r4 ||r4 })
              { x2 : (!! x2 cur2) = v1})
in
let fst ['b 'a8||]= logic (('a8 * 'b)) -> 'a8 in
let snd ['b1 'a9||]= logic (('a9 * 'b1)) -> 'b1 in
let + = logic nat -> nat -> nat in
let - = logic nat -> nat -> nat in
let * = logic nat -> nat -> nat in
let < = logic nat -> nat -> prop in
let <= = logic nat -> nat -> prop in
let > = logic nat -> nat -> prop in
let >= = logic nat -> nat -> prop in
let max = logic nat -> nat -> nat in
let min = logic nat -> nat -> nat in
let pre ['b2 'a10||]= (λ(x3:('a10 * 'b2)) -> fst x3) in
let post ['b3 'a11||]= (λ(x4:('a11 * 'b3)) -> snd x4) in
let
forto [||e1]=
             (λ(inv:nat -> map{|e1 } -> prop) ->
             (λ(start:nat) ->
             (λ(end_:nat) ->
             (λ(f:nat ->{|e1 } unit) -->
             {(inv start cur3) /\
              (forall (i:nat).
               ((start <= i) /\ (i <= end_)) ->
               (forall (m:map{|e1 }).
                (inv i m) ->
                ((pre f i m) /\
                 (forall (n:map{|e1 }). (post f i m n ()) -> (inv (i + 1) n)))))}
             param(unit,{|e1 }) {inv (max start (end_ + 1)) cur4}))))
in
let
fordownto [||e2]=
                 (λ(inv1:nat -> map{|e2 } -> prop) ->
                 (λ(start1:nat) ->
                 (λ(end_1:nat) ->
                 (λ(f1:nat ->{|e2 } unit) -->
                 {(inv1 start1 cur5) /\
                  (forall (i1:nat).
                   ((start1 <= i1) /\ (i1 <= end_1)) ->
                   (forall (m1:map{|e2 }).
                    (inv1 i1 m1) ->
                    ((pre f1 i1 m1) /\
                     (forall (n1:map{|e2 }).
                      (post f1 i1 m1 n1 ()) -> (inv1 (i1 - 1) n1)))))}
                 param(unit,{|e2 }) {inv1 (min start1 (end_1 - 1)) cur6}))))
in
let fact = logic nat -> nat in
let fact_zero = axiom (fact 0) = 1 in
let
fact_step =
           axiom forall (n2:nat).
                 (0 <= n2) -> ((fact (n2 + 1)) = (n2 * (fact n2)))
in
let
rec(nat ->{|} nat) f2 =
                       (λ(x5:nat) --> {0 <= x5}
                       if x5 == 0 then 1 else x5 * (f2 (x5 - 1))
                       { r5 : r5 = (fact x5)})
in ()
