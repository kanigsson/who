logic = ['a||] : a -> a -> prop
logic ->  : prop -> prop -> prop
logic <=  : int -> int -> prop
logic +  : int -> int -> int
logic *  : int -> int -> int
logic -  : int -> int -> int
type bool
logic == ['a1||] : a1 -> a1 -> bool
logic fact  : int -> int
axiom fact_zero : (fact 0) =[int||] 1
axiom fact_step : forall (n:int).
                  (0 <= n) -> ((fact (n + 1)) =[int||] (n * (fact n)))
let
  rec(int ->{{ }} int) f  = (fun (x:int) -> {(fun (cur:< >) -> 0 <= x)}
                            if x ==[int||] 0 then 1 else x * (f (x - 1))
                            {(fun (old:< >) ->
                             (fun (cur1:< >) ->
                             (fun (r:int) -> r =[int||] (fact x))))}) 
