type region
type refty['u||]
logic ref_get ['u||] : region -> refty[u] -> u
logic get_2_1_tuple ['a 'b||] : (a * b) -> a
logic get_2_2_tuple ['a 'b||] : (a * b) -> b
logic = ['a||] : a -> a -> prop
logic ->  : prop -> prop -> prop
logic !! ['a|r|'e] : ref(r,a) -> <r 'e> -> a
logic z  : int
logic f [|r|'e] : ref(r,int) -> <r 'e> -> int
letregion r r1
goal g : forall (x:ref(r1,int)).
         forall (k:ref(r,int)).
         forall (u:<r1 r >).
         (z =[int||] (f [| r1| {r }] x u)) ->
         ((!! [int| r1| {r }] x u) =[int||] (!! [int| r| {r1 }] k u))
