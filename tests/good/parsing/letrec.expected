logic fst ['a 'b||] : (a * b) -> a
logic snd ['a 'b||] : (a * b) -> b
let pre ['a 'b||] = (fun (x:a * b) -> fst [a,b||] x) 
let post ['a 'b||] = (fun (x:a * b) -> snd [a,b||] x) 
let rec apply ['a||'e] (g : a ->{  +  'e} a) (x : a) :
  a {  +  'e} = {(fun (cur:< 'e>) ->
                 pre [a -> < 'e> -> prop,a -> < 'e> -> < 'e> -> a -> prop||]
                 g x cur)} g x
  {(fun (old:< 'e>) ->
   (fun (cur:< 'e>) ->
   (fun (r:a) ->
   post [a -> < 'e> -> prop,a -> < 'e> -> < 'e> -> a -> prop||] g x old cur r)))} 
