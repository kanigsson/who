type unit
logic = ['a||] : a -> a -> prop
logic !! ['a|r|'e] : ref(r,a) -> <r 'e> -> a
let
  := ['a|r|] = (fun (x:ref(r,a)) ->
               (fun (v:a) -> {(fun (cur:<r >) -> True)}
               parameter(unit,{ } + {r })
               {(fun (old:<r >) ->
                (fun (cur:<r >) ->
                (fun (anon:unit) -> (!! [a| r| { }] x cur) =[a||] v)))})) 
let
  f [|r|] = (fun (x:ref(r,int)) -> {(fun (cur:<r >) -> True)} x :=[int| r|] 0
            {(fun (old:<r >) ->
             (fun (cur:<r >) -> (fun (anon:unit) -> True)))}) 
