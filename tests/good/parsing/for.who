logic = ['a||] : 'a -> 'a -> prop
logic /\ : prop -> prop -> prop
logic -> : prop -> prop -> prop
logic !! ['a|r|'e] : ref(r,'a) -> <r 'e > -> 'a
parameter ! ['a|r|] (x : ref(r,'a)) : 'a, {r} =
  {}
  {r : !!x = r /\ !!x|old = !!x}
logic fst ['a 'b||] : 'a * 'b -> 'a
logic snd ['a 'b||] : 'a * 'b -> 'b
let pre ['a 'b||] (x : 'a * 'b) = fst x
let post ['a 'b||] (x : 'a * 'b) = snd x
logic <= : int -> int -> prop
  logic < : int -> int -> prop
logic + : int -> int -> int
logic * : int -> int -> int
logic int_max : int -> int -> int
parameter := ['a|r|] (x : ref(r,'a)) (v : 'a) : unit, {r} =
  {}
  { !!x = v}


parameter forto [||'e] (inv : int -> <'e> -> prop) (start end_ : int) 
  (f : int ->{'e} unit) : unit, {'e} =
    { inv start cur /\
          forall (i : int). start <= i /\ i <= end_ ->
          forall (m : <'e>) . inv i m -> pre f i m /\
          forall (n : <'e>). post f i m n () -> inv (i+1) n
    }
    { inv (int_max start (end_ + 1)) cur} 
let f [|r|](b : unit) (x : ref(r,int)) = 
  {}
  for i = 1 to 5 do
    { !!x < i * 10}
    x := !x + i
  done
  {}
