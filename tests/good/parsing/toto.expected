logic /\  : prop -> prop -> prop
logic ->  : prop -> prop -> prop
logic +  : int -> int -> int
logic -  : int -> int -> int
type unit
logic tt  : unit
logic combine [||'e 'e1 'e2] : < 'e 'e1> -> < 'e1 'e2> -> < 'e 'e1 'e2>
logic restrict [||'e 'e1] : < 'e 'e1> -> < 'e1>
logic empty  : < >
logic int_max  : int -> int -> int
logic int_min  : int -> int -> int
logic <=  : int -> int -> prop
let forto [||'e
  'e1] = (fun (inv:int -> < 'e1> -> prop) ->
         (fun (start:int) ->
         (fun (end_:int) ->
         (fun (f:int ->{ 'e +  'e1} unit) ->
         {(fun (cur:< 'e 'e1>) ->
          (inv start (restrict [|| { 'e} { 'e1}] cur)) /\
          (forall (i:int).
           (start <= i) ->
           ((i <= end_) ->
            ([[(fun (cur1:< 'e 'e1>) ->
               inv i (restrict [|| { 'e} { 'e1}] cur1))]]f i[[(fun (old:< 'e
                                                              'e1>) ->
                                                              (fun (cur1:< 'e
                                                              'e1>) ->
                                                              (fun (anon:unit)
                                                              ->
                                                              inv (i + 1)
                                                              (restrict [||
                                                               { 'e} { 'e1}]
                                                               cur1))))]]))))}
         parameter(unit,{ 'e +  'e1})
         {(fun (old:< 'e 'e1>) ->
          (fun (cur:< 'e 'e1>) ->
          (fun (anon:unit) ->
          inv (int_max start (end_ + 1)) (restrict [|| { 'e} { 'e1}] cur))))})))) 
let fordownto [||'e
  'e1] = (fun (inv:int -> < 'e1> -> prop) ->
         (fun (start:int) ->
         (fun (end_:int) ->
         (fun (f:int ->{ 'e +  'e1} unit) ->
         {(fun (cur:< 'e 'e1>) ->
          (inv start (restrict [|| { 'e} { 'e1}] cur)) /\
          (forall (i:int).
           (end_ <= i) ->
           ((i <= start) ->
            ([[(fun (cur1:< 'e 'e1>) ->
               inv i (restrict [|| { 'e} { 'e1}] cur1))]]f i[[(fun (old:< 'e
                                                              'e1>) ->
                                                              (fun (cur1:< 'e
                                                              'e1>) ->
                                                              (fun (anon:unit)
                                                              ->
                                                              inv (i - 1)
                                                              (restrict [||
                                                               { 'e} { 'e1}]
                                                               cur1))))]]))))}
         parameter(unit,{ 'e +  'e1})
         {(fun (old:< 'e 'e1>) ->
          (fun (cur:< 'e 'e1>) ->
          (fun (anon:unit) ->
          inv (int_min start (end_ - 1)) (restrict [|| { 'e} { 'e1}] cur))))})))) 
