section basiclogic coq predefined
  pangoline predefined
   logic /\  : prop -> prop -> prop
  logic \/  : prop -> prop -> prop
  logic ->  : prop -> prop -> prop
  logic ~  : prop -> prop
  logic = ['a||] : 'a -> 'a -> prop
  logic <> ['a1||] : 'a1 -> 'a1 -> prop
  logic fst ['a2 'b||] : ('a2 * 'b) -> 'a2
  logic snd ['a3 'b1||] : ('a3 * 'b1) -> 'b1
  logic , ['a4 'b2||] : 'a4 -> 'b2 -> 'a4 * 'b2 end
section arith coq "WhoArith"
  pangoline predefined
   logic +  : int -> int -> int
  logic -  : int -> int -> int
  logic *  : int -> int -> int
  logic <  : int -> int -> prop
  logic <=  : int -> int -> prop
  logic >  : int -> int -> prop
  logic >=  : int -> int -> prop
  logic <<  : int -> int -> bool
  logic <<=  : int -> int -> bool
  logic >>  : int -> int -> bool
  logic >>=  : int -> int -> bool
  logic max  : int -> int -> int
  logic min  : int -> int -> int
  logic mod  : int -> int -> int
  logic band  : bool -> bool -> bool
  logic bor  : bool -> bool -> bool end
logic == ['a5||] : 'a5 -> 'a5 -> bool
logic != ['a6||] : 'a6 -> 'a6 -> bool
section Whoref coq "WhoMap"
  pangoline predefined
   logic !! ['a7|r|'e] : ref(r,'a7) -> < 'e > -> 'a7
  let
    ! ['a8|r1|] = (fun (x:ref(r1,'a8)) ->  parameter('a8,{r1  })
                  { r2 : ((!! x cur) = r2) /\ ((!! x old) = (!! x cur))}) 
  let
    := ['a9|r3|] = (fun (x1:ref(r3,'a9)) ->
                   (fun (v:'a9) ->  parameter(unit,{r3  })
                   {(!! x1 cur1) = v})) 
  let
    ref ['a10|r4|] = (fun (v1:'a10) ->cap r4  parameter(ref(r4,'a10),{r4  })
                     { x2 : (!! x2 cur2) = v1}) 
  logic combine [||'e1 'e2 'e3] : < 'e1 'e2 > -> < 'e2 'e3 > -> < 'e1 'e2 'e3
    >
  logic restrict [||'e11 'e21] : < 'e11 'e21 > -> < 'e21 >
  logic empty  : < >
  let pre ['a11 'b3||] = (fun (x3:'a11 * 'b3) -> fst x3) 
  let post ['a12 'b4||] = (fun (x4:'a12 * 'b4) -> snd x4)  end
let
  forto [||'e1] = (fun (inv:int -> < 'e1 > -> prop) ->
                  (fun (start:int) ->
                  (fun (end_:int) ->
                  (fun (f:int ->{ 'e1 } unit) ->
                  {(inv start cur3) /\
                   (forall (i:int).
                    ((start <= i) /\ (i <= end_)) ->
                    (forall (m:< 'e1 >).
                     (inv i m) ->
                     ((pre f i m) /\
                      (forall (n:< 'e1 >).
                       (post f i m n tt) -> (inv (i + 1) n)))))}
                  parameter(unit,{ 'e1 }) {inv (max start (end_ + 1)) cur4})))) 
let
  fordownto [||'e2] = (fun (inv1:int -> < 'e2 > -> prop) ->
                      (fun (start1:int) ->
                      (fun (end_1:int) ->
                      (fun (f1:int ->{ 'e2 } unit) ->
                      {(inv1 start1 cur5) /\
                       (forall (i1:int).
                        ((end_1 <= i1) /\ (i1 <= start1)) ->
                        (forall (m1:< 'e2 >).
                         (inv1 i1 m1) ->
                         ((pre f1 i1 m1) /\
                          (forall (n1:< 'e2 >).
                           (post f1 i1 m1 n1 tt) -> (inv1 (i1 - 1) n1)))))}
                      parameter(unit,{ 'e2 })
                      {inv1 (min start1 (end_1 - 1)) cur6})))) 
section Array coq "WhoArray"
  pangoline takeover
   type array['a13||]
  logic ar_empty ['a14||] : array['a14||]
  logic get ['a15||] : int -> (array['a15||]) -> 'a15
  logic set ['a16||] : int -> 'a16 -> (array['a16||]) -> array['a16||]
  logic len ['a17||] : (array['a17||]) -> int
  logic create ['a18||] : int -> 'a18 -> array['a18||]
  axiom update_length : forall ['a19||]. forall (t:array['a19||]).
                                         forall (i2:int).
                                         forall (z:'a19).
                                         (len t) = (len (set i2 z t))
  axiom get_set_eq : forall ['a20||]. forall (t1:array['a20||]).
                                      forall (i3:int).
                                      forall (z1:'a20).
                                      (i3 < (len t1)) ->
                                      ((get i3 (set i3 z1 t1)) = z1)
  axiom length_empty : forall ['a21||]. (len (ar_empty : array['a21||])) = 0
  axiom get_set_neq : forall ['a22||]. forall (t2:array['a22||]).
                                       forall (i4:int).
                                       forall (j:int).
                                       forall (z2:'a22).
                                       (i4 < (len t2)) ->
                                       ((j < (len t2)) ->
                                        ((i4 <> j) ->
                                         ((get i4 (set j z2 t2)) =
                                          (get i4 t2))))
  axiom length_nonnegative : forall ['a23||]. forall (t3:array['a23||]).
                                              0 <= (len t3)
  axiom length_create : forall ['a24||]. forall (l:int).
                                         forall (v2:'a24).
                                         (0 <= l) ->
                                         ((len (create l v2)) = l)
  axiom length_access : forall ['a25||]. forall (i5:int).
                                         forall (l1:int).
                                         forall (v3:'a25).
                                         (0 <= i5) ->
                                         ((i5 <= l1) ->
                                          ((get i5 (create l1 v3)) = v3)) end
section List coq "WhoList"
  pangoline takeover
   type list['a26||]
  logic nil ['a27||] : list['a27||]
  logic cons ['a28||] : 'a28 -> (list['a28||]) -> list['a28||]
  logic is_nil ['a29||] : (list['a29||]) -> bool
  logic l_in ['a30||] : 'a30 -> (list['a30||]) -> prop end
type array1['a31||]
logic get1 ['a32||] : int -> (array1['a32||]) -> 'a32
logic set1 ['a33||] : int -> 'a33 -> (array1['a33||]) -> array1['a33||]
axiom get_set_eq : forall ['a34||]. forall (t4:array1['a34||]).
                                    forall (i6:int).
                                    forall (z3:'a34).
                                    (get1 i6 (set1 i6 z3 t4)) = z3
