type unit
logic tt : unit
logic = ['a||] : 'a -> 'a -> prop
logic fst ['a 'b||] : 'a * 'b -> 'a
logic snd ['a 'b||] : 'a * 'b -> 'b
logic !! ['a|r|'e] : ref(r,'a) -> <r 'e > -> 'a
parameter := ['a|r|] (x : ref(r,'a)) (v : 'a) : unit, {r} =
  {}
  { !!x = v}

let apply ['a 'b ||'e] (f : 'a ->{'e} 'b) (x : 'a) =
  {fst f x cur}
  f x
  { k : snd f x old cur k }

let main [|r|] (x:ref(r,int)) =
  {}
  apply [{r}] (fun (z : unit) -> {} x := 0 { !! x = 0 } ) ()
  { !! x = 0 }

