logic = ['a||] : a -> a -> prop
logic /\  : prop -> prop -> prop
logic ->  : prop -> prop -> prop
logic fst ['a 'b||] : (a * b) -> a
logic snd ['a 'b||] : (a * b) -> b
logic !! ['a|r|'e] : ref(r,a) -> <r 'e> -> a
let
  ! ['a|r|] = (fun (x:ref(r,a)) -> {(fun (cur:<r >) -> True)}
              parameter(a,{r })
              {(fun (old:<r >) ->
               (fun (cur:<r >) ->
               (fun (r1:a) ->
               ((!! [a| r| { }] x cur) =[a||] r1) /\
               ((!! [a| r| { }] x old) =[a||] (!! [a| r| { }] x cur)))))}) 
let
  f ['a|toto|] = (fun (x:ref(toto,a)) -> {(fun (cur:<toto >) -> True)}
                 ! [a| toto|] x
                 {(fun (old:<toto >) ->
                  (fun (cur:<toto >) -> (fun (anon:a) -> True)))}) 
