logic = ['a||] : a -> a -> prop
logic /\  : prop -> prop -> prop
logic !! ['a|r|'e] : ref(r,a) -> <r 'e> -> a
let
  ! ['a|r|] = (fun (x:ref(r,a)) -> {(fun (cur:<r >) -> True)}
              parameter(a,{ } + {r })
              {(fun (old:<r >) ->
               (fun (cur:<r >) ->
               (fun (r1:a) ->
               ((!! [a| r| { }] x cur) =[a||] r1) /\
               ((!! [a| r| { }] x old) =[a||] (!! [a| r| { }] x cur)))))}) 
let apply ['a
  'b||'e] = (fun (f:a ->{{ } + { 'e}} b) ->
            (fun (x:a) -> {(fun (cur:< 'e>) -> True)} f x
            {(fun (old:< 'e>) -> (fun (cur:< 'e>) -> (fun (anon:b) -> True)))})) 
let
  h [|r|] = (fun (x:ref(r,int)) -> {(fun (cur:<r >) -> True)}
            apply [int,int|| {r }]
            (fun (z:int) -> {(fun (cur:<r >) -> True)} ! [int| r|] x
            {(fun (old:<r >) -> (fun (cur:<r >) -> (fun (anon:int) -> True)))})
            5
            {(fun (old:<r >) -> (fun (cur:<r >) -> (fun (anon:int) -> True)))}) 
