(*
let add h key info =
  let i = (hash key) mod (Array.length h.data) in
  let bucket = Cons(key, info, h.data.(i)) in
  h.data.(i) <- bucket;
  h.size <- succ h.size;
  if h.size > Array.length h.data lsl 1 then resize hash h
*)

section Hashtbl
  coq "WhoHashtbl"
  type hashkey
  logic hash : hashkey -> int
  type hl ['a||] = (hashkey * 'a) list

  logic repr ['a||] : 
    'a hl array -> 'a hl -> prop

  let is_hashtable ['a||] (h : 'a hl array) =
    let l = len h in
    0 < l /\
    forall (i : int).
      0 <= i -> i < l ->
      forall (k : hashkey) (v : 'a).
        l_in (k,v) (get i h) -> mod (hash k) l = i

end

let add ['a |r| ] (l : 'a hl)
  (h : ref(r,'a hl array)) (key : hashkey) (val : 'a) =
  {is_hashtable (!! h) /\ repr (!! h) l  }
  let i = mod (hash key) (len (!h)) in
  h := set i (cons (key,val) (get i (!h))) (!h)
  {is_hashtable (!! h) /\ repr (!! h) (cons (key, val) l)}
