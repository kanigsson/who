let rec map ['a 'b||'e] (inv : <'e> -> 'a list -> 'b list -> prop)
  (f : 'a ->{'e} 'b) (l : 'a list) : 'b list {'e} =
  { (forall s. inv s Nil Nil) /\
    forall x l l2.
    [[ inv cur l l2 ]]f x [[ r :  inv cur (Cons x l) (Cons r l2)]] }
  match l with
  | Nil -> Nil
  | Cons (x,rl) ->
      let tl = map inv f rl in
      let hd = f x in
      Cons hd tl
  end
  {r : inv cur l r }
