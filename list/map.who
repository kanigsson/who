let map ['a 'b||'e] (inv : <'e> -> 'a list -> 'b list -> prop)
  (f : 'a ->{'e} 'b) (l : 'a list) =
  { }
  let rec aux acc l : 'b list {'e} =
    { inv cur l acc}
    match l with
    | Nil -> Nil
    | Cons (x,rl) ->
        let r = f x in
        Cons r (map inv f rl)
    end
    {r : inv cur l r } in
  aux Nil l
  {r : inv cur l r }
