(*
let map f a =
  let l = length a in
  if l = 0 then [||] else begin
    let r = create l (f(unsafe_get a 0)) in
    for i = 1 to l - 1 do
      unsafe_set r i (f(unsafe_get a i))
    done;
    r
  end

*)

let map ['a 'b|in_ out|'e] 
  (inv : <in_ 'e> -> int -> 'a array -> prop) 
  (ar : ref(in_, 'a array)) (f : 'a ->{in_ 'e} 'a)  = allocates out
  { (forall (k : 'a array). inv cur|{in_ 'e} 0 k) /\ 
    forall (i:int) (k : 'a array) . 0 <= i /\ i < len (!!ar) ->
    [[ inv cur i k ]] f (get i !ar) [[ r : inv cur (i+1) (set i r k) ]]
  }
  let l = len !ar in
  if l == 0 then ref{{out}} ar_empty
  else
    let r = ref{{out}} (create l (f (get 0 !ar))) in
    (for i = 1 to l - 1 do 
      { inv cur|{in_ 'e} i !!r }
      r := set i (f (get i !ar)) !r
    done) ;
    r
  {r : inv cur|{in_ 'e} (len !!ar|old) !!r }
