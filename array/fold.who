(*
let fold_left f x a =
  let r = ref x in
  for i = 0 to length a - 1 do
    r := f !r (unsafe_get a i)
  done;
  !r
  *)

let fold_left ['a 'b|r|'e]
  (inv : <r 'e> -> int -> 'b -> prop)
  (f : 'b ->{r 'e} 'a -> 'b) (acc : 'b) (ar : ref(r,'a array)) =
  { inv cur 0 acc /\
    forall (i:int). 0 <= i /\ i < len (!!ar) ->
    forall (z : 'b). [[ inv cur i z]] f z (get i !ar) [[ r : inv cur (i+1) r]]
  }
  letregion loc in
  let acc = ref{{loc}} acc in
  for index = 0 to len !ar - 1 do
    { inv cur@{r 'e} index !!acc }
    acc := f !acc (get index !ar)
  done;
  !acc
  { r : inv cur (len !!ar@old) r }

(* As precondition, I would like to write :
  inv {ar; e}|cur 0 acc /\
    forall (i : int). 0 <= i /\ i < length [|int] ar ->
    forall (m : <ar e>). forall (acc : int).
      inv m i acc /\ ar|m = ar ->
        ppre f (get [|int] i ar|m) acc {e|m} /\
        forall (n : <ar e>). forall (acc' : int).
          ar|n = ar -> ppost f (get [|int] i ar|m) acc {e|m} {e|n} acc' ->
            inv n (i + 1) acc'
*)

