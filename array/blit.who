
type 'a array

logic get : forall 'a. int -> 'a array -> 'a
logic set : forall 'a. int -> 'a -> 'a array -> 'a array
logic length : forall 'a. 'a array -> int

axiom update_length : 
  forall 'a. forall (t : 'a array) (i : int) (z : 'a).
    length [| 'a|] t = length [|'a|] (set [|'a|] i z t)

axiom get_set_eq : 
  forall 'a. forall (t : 'a array) (i : int) (z : 'a).
    i < length [|'a|] t -> get [|'a|] i (set [|'a|] i z t) = z

axiom get_set_neq : 
  forall 'a. forall (t : 'a array) (i : int) (j : int) (z : 'a).
    i < length [|'a|] t -> j < length [|'a|] t -> i <> j -> 
    get [|'a|] i (set [|'a|] j z t) = get [|'a|] i t

axiom length_nonnegative : 
  forall 'a. forall (t : 'a array).  0 <= length [|'a|] t

use (ar1 ar2 : int array)

(*
let blit a1 ofs1 a2 ofs2 len =
  if len < 0 || ofs1 < 0 || ofs1 > length a1 - len
             || ofs2 < 0 || ofs2 > length a2 - len
  then invalid_arg "Array.blit"
  else if ofs1 < ofs2 then
    (* Top-down copy *)
    for i = len - 1 downto 0 do
      unsafe_set a2 (ofs2 + i) (unsafe_get a1 (ofs1 + i))
    done
  else
    (* Bottom-up copy *)
    for i = 0 to len - 1 do
      unsafe_set a2 (ofs2 + i) (unsafe_get a1 (ofs1 + i))
    done
*)

let blit (ofs1 ofs2 len : int) =
  {0 <= len /\ 0 <= ofs1 /\ 0 <= ofs2 /\ 
   ofs1 <= length [|int|] ar1 - len /\ ofs2 <= length [|int|] ar2 - len }
   let a = !ar1 in
   let l = length [|int|] !ar2 in
   if ofs1 < ofs2 then
     (* Top-down copy *)
     for i = len - 1 downto 0 do
      {ar1 = a /\ length [|int|] ar2 = l /\
      forall (k :int).  i < k /\ k <= len - 1 ->           
        get [|int|] (ofs2 + k) ar2 = get [|int|] (ofs1 + k) ar1 }
      ar2 := set [|int|] (ofs2 + i) (get [|int|] (ofs1 + i) !ar1) !ar2
     done
   else
     (* Bottum-up copy *)
     for i = 0 to len - 1 do
      {ar1 = a /\ length [|int|] ar2 = l /\
      forall (k :int).  0 <= k /\ k < i -> 
          get [|int|] (ofs2 + k) ar2 = get [|int|] (ofs1 + k) ar1 }
       ar2 := set [|int|] (ofs2 + i) (get [|int|] (ofs1 + i) !ar1) !ar2
     done
  {ar1|old = ar1 /\ length [|int|] ar2 = length [|int|] ar2|old /\
    forall (k : int).  0 <= k /\ k < len -> 
          get [|int|] (ofs2 + k) ar2 = get [|int|] (ofs1 + k) ar1 }
