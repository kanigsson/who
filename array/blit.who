(*
let blit a1 ofs1 a2 ofs2 len =
  if len < 0 || ofs1 < 0 || ofs1 > length a1 - len
             || ofs2 < 0 || ofs2 > length a2 - len
  then invalid_arg "Array.blit"
  else if ofs1 < ofs2 then
    (* Top-down copy *)
    for i = len - 1 downto 0 do
      unsafe_set a2 (ofs2 + i) (unsafe_get a1 (ofs1 + i))
    done
  else
    (* Bottom-up copy *)
    for i = 0 to len - 1 do
      unsafe_set a2 (ofs2 + i) (unsafe_get a1 (ofs1 + i))
    done
*)

let blit ['a|r1 r2|] (ar1 : ref(r1,'a array)) (ar2 : ref(r2,'a array))
      (ofs1 ofs2 len : int) =
  {0 <= len /\ 0 <= ofs1 /\ 0 <= ofs2 /\ 
   ofs1 <= length !!ar1 - len /\ ofs2 <= length !!ar2 - len }
   let a = !ar1 in
   let l = length (!ar2) in
   if ofs1 << ofs2 then
     (* Top-down copy *)
     for i = len - 1 downto 0 do
      {!!ar1 = a /\ length !!ar2 = l /\
      forall (k :int).  i < k /\ k <= len - 1 ->           
        get (ofs2 + k) !!ar2 = get (ofs1 + k) !!ar1 }
      ar2 := set (ofs2 + i) (get (ofs1 + i) (!ar1)) (!ar2)
     done
   else
     (* Bottum-up copy *)
     for i = 0 to len - 1 do
      {!!ar1 = a /\ length !!ar2 = l /\
      forall (k :int).  0 <= k /\ k < i -> 
          get (ofs2 + k) !!ar2 = get (ofs1 + k) !!ar1 }
       ar2 := set (ofs2 + i) (get (ofs1 + i) (!ar1)) (!ar2)
     done
  {!!ar1|old = !!ar1 /\ length !!ar2 = length !!ar2|old /\
    forall (k : int).  0 <= k /\ k < len -> 
          get (ofs2 + k) !!ar2 = get (ofs1 + k) !!ar1 }
