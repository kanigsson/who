let sub ['a|in_ out|] (ar : ref(in_, 'a array)) (ofs l : int) =
  { 0 <= ofs /\ 0 <= l /\ ofs + l <= len !!ar }
  if l == 0 then ref(out) ar_empty
  else
    let res = ref(out) (create l (get ofs !ar)) in
    (for i = 0 to l - 1 do
      { len !!res = l /\
        forall (k:int). 0 <= k -> k < i -> get k !!res = get (ofs + k) !!ar }
      res := set i (get (ofs + i) !ar) !res
    done);
  res
  { r : len !!r = l /\
    forall (k:int). 0 <= k -> k < l -> get k !!r = get (ofs + k) !!ar }

(* let sub a ofs len =
  if ofs < 0 || len < 0 || ofs > length a - len then invalid_arg "Array.sub"
  else if len = 0 then [||]
  else begin
    let r = create len (unsafe_get a ofs) in
    for i = 1 to len - 1 do unsafe_set r i (unsafe_get a (ofs + i)) done;
    r
  end *)
