(*
let map f a =
  let l = length a in
  if l = 0 then [||] else begin
    let r = create l (f(unsafe_get a 0)) in
    for i = 1 to l - 1 do
      unsafe_set r i (f(unsafe_get a i))
    done;
    r
  end

*)

logic sum_array : int -> int array -> int
axiom sum_array_none :
  forall (t : int array). sum_array 0 t = 0
axiom sum_array_step :
  forall (t : int array) (i : int).
    0 <= i -> i < len t ->
    sum_array (i+1) t = sum_array i t + get i t


logic sub ['a||] : 'a array -> int -> 'a array

axiom sub_equal ['a||] :
  forall (i k : int) (a : 'a array).
    0 <= k  /\ k < i /\
    0 <= k /\ k < len a ->
    get k (sub a i) = get k a

axiom sub_length_1 ['a||] :
  forall (i : int) (a : 'a array).
    0 <= i /\ i <= len a -> len (sub a i) = i

axiom sub_length_2 ['a||] :
  forall (i : int) (a : 'a array).
    i > len a -> len (sub a i) = len a

axiom sub_ident ['a||] :
  forall (a : 'a array).  sub a (len a) = a

axiom set_equal ['a] :
  forall (a : 'a array) (i l : int) (k : 'a).
    0 <= i -> i < l -> get i a = k -> set i k a = a

let map ['a 'b|in_ out|'e]
  (inv : <in_ 'e> -> 'b array -> int -> prop)
  (ar : ref(in_, 'a array)) (f : 'a ->{in_ 'e} 'b) =
  {
    inv cur@{in_ 'e} ar_empty 0 /\
     [[ 0 < len !!ar /\ inv cur ar_empty 0 ]] f (get 0 !ar)
     [[ k : forall (r : 'b array). 1 <= len r -> inv cur (sub (set 0 k r) 1) 1 ]] /\
    forall (k : 'b array) (i:int).
      1 <= i -> i < len !!ar ->
      len k = len !!ar ->
    [[ inv cur (sub k i) i ]] f (get i !ar) [[ r: inv cur (sub (set i r k) (i+1)) (i+1) ]]
  }
  let l = len !ar in
  if l == 0 then ref(out) ar_empty
  else
    let k = f (get 0 !ar) in
    let r = ref(out) (create l k) in
    assert ( !r = set 0 k !r);
    assert ( sub !r 1 = sub (set 0 k !r) 1);
    (for i = 1 to l - 1 do
      { inv cur@{in_ 'e} (sub !!r i) i /\ len !!r = l }
      r := set i (f (get i !ar)) !r
    done) ;
    r
  {r : inv cur@{in_ 'e} !!r (len !!ar@old) }


let inv (k s : int) (a : int array) (b : int array) =
  0 <= k /\ k <= len a /\ k <= len b /\ (k = 0 -> s = 0) /\
  forall (i : int). 0 < i /\ i <= k -> sum_array i a = s /\ s = get (i-1) b

let main [|r |] (a : ref(r, int array)) =
  {}
  letregion k in
  letregion out in
  let s = ref(k) 0 in
  let f (x : int) =
      {}
      a := !a;
      s := !s + x; !s
      {r : !!s = !!s@old + x /\ r = !!s /\ !!a = !!a@old }
  in
  let z =
  (map [{k}]
    (fun (cur : <r k>) (out : int array) i -> inv i !!s !!a out)
    a f : ref(out,int array))  in
  !z
  {r : inv (len !!a@old) (sum_array (len !!a@old) !!a) !!a r}
