logic sub ['a||] : 'a array -> int -> 'a array

axiom sub_equal ['a||] :
  forall (i k : int) (a : 'a array).
    0 <= k  /\ k < i /\
    0 <= k /\ k < len a ->
    get k (sub a i) = get k a

axiom sub_length_1 ['a||] :
  forall (i : int) (a : 'a array).
    0 <= i /\ i <= len a -> len (sub a i) = i

axiom sub_length_2 ['a||] :
  forall (i : int) (a : 'a array).
    i > len a -> len (sub a i) = len a

axiom sub_ident ['a||] :
  forall (a : 'a array). sub a (len a) = a

axiom set_equal ['a] :
  forall (a : 'a array) (i l : int) (k : 'a).
    0 <= i -> i < l -> get i a = k -> set i k a = a

let init ['a|out| 'e]
  (inv : <'e> -> 'a array -> int -> prop ) (l : int) (f : int ->{'e} 'a) =
    allocates out
  { 0 <= l /\ inv cur|{'e} ar_empty 0 /\
     [[ ]] f 0 [[ r : forall (k : 'a array). inv cur (sub (set 0 r k) 1) 1 ]] /\
    forall (k : 'a array) (i:int).
      1 <= i /\ i < l ->
    [[ inv cur (sub k i) i ]] f i [[ r: inv cur (sub (set i r k) (i+1)) (i+1) ]]
      }
  if l == 0 then ref{{out}} ar_empty
  else
    let k = f 0 in
    let res = ref{{out}} (create l k) in
    assert ( !res = set 0 k !res);
    let z =
      for i = 1 to l - 1 do
        {inv cur|{'e} (sub !!res i) i /\ len !!res = l}
        res := set i (f i) !res
      done in
    res
  { r : inv cur|{'e} !!r l /\ len!!r = l }

